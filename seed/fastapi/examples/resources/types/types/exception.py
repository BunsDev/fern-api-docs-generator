# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel
from .exception_info import ExceptionInfo

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def generic(self, value: ExceptionInfo) -> Exception:
        return Exception(_Exception.Generic(**value.dict(exclude_unset=True), type="generic"))

    def timeout(self) -> Exception:
        return Exception(_Exception.Timeout(type="timeout"))


class Exception(UniversalRootModel):
    """
    Examples
    --------
    from seed.examples import Exception_Generic

    Exception_Generic(
        exception_type="Unavailable",
        exception_message="This component is unavailable!",
        exception_stacktrace="<logs>",
    )
    """

    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_Exception.Generic, _Exception.Timeout], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Exception.Generic, _Exception.Timeout]:
            return self.root

    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_Exception.Generic, _Exception.Timeout], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Exception.Generic, _Exception.Timeout]:
            return self.__root__

    def visit(
        self, generic: typing.Callable[[ExceptionInfo], T_Result], timeout: typing.Callable[[], T_Result]
    ) -> T_Result:
        if self.get_as_union().type == "generic":
            return generic(ExceptionInfo(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))
        if self.get_as_union().type == "timeout":
            return timeout()


class _Exception:
    class Generic(ExceptionInfo):
        type: typing.Literal["generic"] = "generic"

        class Config:
            allow_population_by_field_name = True

    class Timeout(UniversalBaseModel):
        type: typing.Literal["timeout"] = "timeout"
