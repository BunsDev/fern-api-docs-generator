# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from .binary_tree_node_and_tree_value import BinaryTreeNodeAndTreeValue
from .doubly_linked_list_node_and_list_value import DoublyLinkedListNodeAndListValue
from .generic_value import GenericValue as resources_commons_types_generic_value_GenericValue
from .singly_linked_list_node_and_list_value import SinglyLinkedListNodeAndListValue

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def integer_value(self, value: int) -> DebugVariableValue:
        return DebugVariableValue(_DebugVariableValue.IntegerValue(type="integerValue", value=value))

    def boolean_value(self, value: bool) -> DebugVariableValue:
        return DebugVariableValue(_DebugVariableValue.BooleanValue(type="booleanValue", value=value))

    def double_value(self, value: float) -> DebugVariableValue:
        return DebugVariableValue(_DebugVariableValue.DoubleValue(type="doubleValue", value=value))

    def string_value(self, value: str) -> DebugVariableValue:
        return DebugVariableValue(_DebugVariableValue.StringValue(type="stringValue", value=value))

    def char_value(self, value: str) -> DebugVariableValue:
        return DebugVariableValue(_DebugVariableValue.CharValue(type="charValue", value=value))

    def map_value(self, value: DebugMapValue) -> DebugVariableValue:
        return DebugVariableValue(_DebugVariableValue.MapValue(**value.dict(exclude_unset=True), type="mapValue"))

    def list_value(self, value: typing.List[DebugVariableValue]) -> DebugVariableValue:
        return DebugVariableValue(_DebugVariableValue.ListValue(type="listValue", value=value))

    def binary_tree_node_value(self, value: BinaryTreeNodeAndTreeValue) -> DebugVariableValue:
        return DebugVariableValue(
            _DebugVariableValue.BinaryTreeNodeValue(**value.dict(exclude_unset=True), type="binaryTreeNodeValue")
        )

    def singly_linked_list_node_value(self, value: SinglyLinkedListNodeAndListValue) -> DebugVariableValue:
        return DebugVariableValue(
            _DebugVariableValue.SinglyLinkedListNodeValue(
                **value.dict(exclude_unset=True), type="singlyLinkedListNodeValue"
            )
        )

    def doubly_linked_list_node_value(self, value: DoublyLinkedListNodeAndListValue) -> DebugVariableValue:
        return DebugVariableValue(
            _DebugVariableValue.DoublyLinkedListNodeValue(
                **value.dict(exclude_unset=True), type="doublyLinkedListNodeValue"
            )
        )

    def undefined_value(self) -> DebugVariableValue:
        return DebugVariableValue(_DebugVariableValue.UndefinedValue(type="undefinedValue"))

    def null_value(self) -> DebugVariableValue:
        return DebugVariableValue(_DebugVariableValue.NullValue(type="nullValue"))

    def generic_value(self, value: resources_commons_types_generic_value_GenericValue) -> DebugVariableValue:
        return DebugVariableValue(
            _DebugVariableValue.GenericValue(**value.dict(exclude_unset=True), type="genericValue")
        )


class DebugVariableValue(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _DebugVariableValue.IntegerValue,
                _DebugVariableValue.BooleanValue,
                _DebugVariableValue.DoubleValue,
                _DebugVariableValue.StringValue,
                _DebugVariableValue.CharValue,
                _DebugVariableValue.MapValue,
                _DebugVariableValue.ListValue,
                _DebugVariableValue.BinaryTreeNodeValue,
                _DebugVariableValue.SinglyLinkedListNodeValue,
                _DebugVariableValue.DoublyLinkedListNodeValue,
                _DebugVariableValue.UndefinedValue,
                _DebugVariableValue.NullValue,
                _DebugVariableValue.GenericValue,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _DebugVariableValue.IntegerValue,
            _DebugVariableValue.BooleanValue,
            _DebugVariableValue.DoubleValue,
            _DebugVariableValue.StringValue,
            _DebugVariableValue.CharValue,
            _DebugVariableValue.MapValue,
            _DebugVariableValue.ListValue,
            _DebugVariableValue.BinaryTreeNodeValue,
            _DebugVariableValue.SinglyLinkedListNodeValue,
            _DebugVariableValue.DoublyLinkedListNodeValue,
            _DebugVariableValue.UndefinedValue,
            _DebugVariableValue.NullValue,
            _DebugVariableValue.GenericValue,
        ]:
            return self.root

    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _DebugVariableValue.IntegerValue,
                _DebugVariableValue.BooleanValue,
                _DebugVariableValue.DoubleValue,
                _DebugVariableValue.StringValue,
                _DebugVariableValue.CharValue,
                _DebugVariableValue.MapValue,
                _DebugVariableValue.ListValue,
                _DebugVariableValue.BinaryTreeNodeValue,
                _DebugVariableValue.SinglyLinkedListNodeValue,
                _DebugVariableValue.DoublyLinkedListNodeValue,
                _DebugVariableValue.UndefinedValue,
                _DebugVariableValue.NullValue,
                _DebugVariableValue.GenericValue,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _DebugVariableValue.IntegerValue,
            _DebugVariableValue.BooleanValue,
            _DebugVariableValue.DoubleValue,
            _DebugVariableValue.StringValue,
            _DebugVariableValue.CharValue,
            _DebugVariableValue.MapValue,
            _DebugVariableValue.ListValue,
            _DebugVariableValue.BinaryTreeNodeValue,
            _DebugVariableValue.SinglyLinkedListNodeValue,
            _DebugVariableValue.DoublyLinkedListNodeValue,
            _DebugVariableValue.UndefinedValue,
            _DebugVariableValue.NullValue,
            _DebugVariableValue.GenericValue,
        ]:
            return self.__root__

    def visit(
        self,
        integer_value: typing.Callable[[int], T_Result],
        boolean_value: typing.Callable[[bool], T_Result],
        double_value: typing.Callable[[float], T_Result],
        string_value: typing.Callable[[str], T_Result],
        char_value: typing.Callable[[str], T_Result],
        map_value: typing.Callable[[DebugMapValue], T_Result],
        list_value: typing.Callable[[typing.List[DebugVariableValue]], T_Result],
        binary_tree_node_value: typing.Callable[[BinaryTreeNodeAndTreeValue], T_Result],
        singly_linked_list_node_value: typing.Callable[[SinglyLinkedListNodeAndListValue], T_Result],
        doubly_linked_list_node_value: typing.Callable[[DoublyLinkedListNodeAndListValue], T_Result],
        undefined_value: typing.Callable[[], T_Result],
        null_value: typing.Callable[[], T_Result],
        generic_value: typing.Callable[[resources_commons_types_generic_value_GenericValue], T_Result],
    ) -> T_Result:
        if self.get_as_union().type == "integerValue":
            return integer_value(self.get_as_union().value)
        if self.get_as_union().type == "booleanValue":
            return boolean_value(self.get_as_union().value)
        if self.get_as_union().type == "doubleValue":
            return double_value(self.get_as_union().value)
        if self.get_as_union().type == "stringValue":
            return string_value(self.get_as_union().value)
        if self.get_as_union().type == "charValue":
            return char_value(self.get_as_union().value)
        if self.get_as_union().type == "mapValue":
            return map_value(DebugMapValue(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))
        if self.get_as_union().type == "listValue":
            return list_value(self.get_as_union().value)
        if self.get_as_union().type == "binaryTreeNodeValue":
            return binary_tree_node_value(
                BinaryTreeNodeAndTreeValue(**self.get_as_union().dict(exclude_unset=True, exclude={"type"}))
            )
        if self.get_as_union().type == "singlyLinkedListNodeValue":
            return singly_linked_list_node_value(
                SinglyLinkedListNodeAndListValue(**self.get_as_union().dict(exclude_unset=True, exclude={"type"}))
            )
        if self.get_as_union().type == "doublyLinkedListNodeValue":
            return doubly_linked_list_node_value(
                DoublyLinkedListNodeAndListValue(**self.get_as_union().dict(exclude_unset=True, exclude={"type"}))
            )
        if self.get_as_union().type == "undefinedValue":
            return undefined_value()
        if self.get_as_union().type == "nullValue":
            return null_value()
        if self.get_as_union().type == "genericValue":
            return generic_value(
                resources_commons_types_generic_value_GenericValue(
                    **self.get_as_union().dict(exclude_unset=True, exclude={"type"})
                )
            )


from .debug_key_value_pairs import DebugKeyValuePairs  # noqa: E402
from .debug_map_value import DebugMapValue  # noqa: E402


class _DebugVariableValue:
    class IntegerValue(UniversalBaseModel):
        type: typing.Literal["integerValue"] = "integerValue"
        value: int

    class BooleanValue(UniversalBaseModel):
        type: typing.Literal["booleanValue"] = "booleanValue"
        value: bool

    class DoubleValue(UniversalBaseModel):
        type: typing.Literal["doubleValue"] = "doubleValue"
        value: float

    class StringValue(UniversalBaseModel):
        type: typing.Literal["stringValue"] = "stringValue"
        value: str

    class CharValue(UniversalBaseModel):
        type: typing.Literal["charValue"] = "charValue"
        value: str

    class MapValue(DebugMapValue):
        type: typing.Literal["mapValue"] = "mapValue"

        class Config:
            allow_population_by_field_name = True

    class ListValue(UniversalBaseModel):
        type: typing.Literal["listValue"] = "listValue"
        value: typing.List[DebugVariableValue]

    class BinaryTreeNodeValue(BinaryTreeNodeAndTreeValue):
        type: typing.Literal["binaryTreeNodeValue"] = "binaryTreeNodeValue"

        class Config:
            allow_population_by_field_name = True

    class SinglyLinkedListNodeValue(SinglyLinkedListNodeAndListValue):
        type: typing.Literal["singlyLinkedListNodeValue"] = "singlyLinkedListNodeValue"

        class Config:
            allow_population_by_field_name = True

    class DoublyLinkedListNodeValue(DoublyLinkedListNodeAndListValue):
        type: typing.Literal["doublyLinkedListNodeValue"] = "doublyLinkedListNodeValue"

        class Config:
            allow_population_by_field_name = True

    class UndefinedValue(UniversalBaseModel):
        type: typing.Literal["undefinedValue"] = "undefinedValue"

    class NullValue(UniversalBaseModel):
        type: typing.Literal["nullValue"] = "nullValue"

    class GenericValue(resources_commons_types_generic_value_GenericValue):
        type: typing.Literal["genericValue"] = "genericValue"

        class Config:
            allow_population_by_field_name = True


update_forward_refs(
    _DebugVariableValue.MapValue,
    DebugKeyValuePairs=DebugKeyValuePairs,
    DebugMapValue=DebugMapValue,
    DebugVariableValue=DebugVariableValue,
)
update_forward_refs(
    _DebugVariableValue.ListValue,
    DebugKeyValuePairs=DebugKeyValuePairs,
    DebugMapValue=DebugMapValue,
    DebugVariableValue=DebugVariableValue,
)
update_forward_refs(DebugVariableValue)
