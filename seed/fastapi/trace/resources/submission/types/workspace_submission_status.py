# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel
from .error_info import ErrorInfo
from .running_submission_state import RunningSubmissionState
from .workspace_run_details import WorkspaceRunDetails

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def stopped(self) -> WorkspaceSubmissionStatus:
        return WorkspaceSubmissionStatus(_WorkspaceSubmissionStatus.Stopped(type="stopped"))

    def errored(self, value: ErrorInfo) -> WorkspaceSubmissionStatus:
        return WorkspaceSubmissionStatus(_WorkspaceSubmissionStatus.Errored(type="errored", value=value))

    def running(self, value: RunningSubmissionState) -> WorkspaceSubmissionStatus:
        return WorkspaceSubmissionStatus(_WorkspaceSubmissionStatus.Running(type="running", value=value))

    def ran(self, value: WorkspaceRunDetails) -> WorkspaceSubmissionStatus:
        return WorkspaceSubmissionStatus(_WorkspaceSubmissionStatus.Ran(**value.dict(exclude_unset=True), type="ran"))

    def traced(self, value: WorkspaceRunDetails) -> WorkspaceSubmissionStatus:
        return WorkspaceSubmissionStatus(
            _WorkspaceSubmissionStatus.Traced(**value.dict(exclude_unset=True), type="traced")
        )


class WorkspaceSubmissionStatus(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _WorkspaceSubmissionStatus.Stopped,
                _WorkspaceSubmissionStatus.Errored,
                _WorkspaceSubmissionStatus.Running,
                _WorkspaceSubmissionStatus.Ran,
                _WorkspaceSubmissionStatus.Traced,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _WorkspaceSubmissionStatus.Stopped,
            _WorkspaceSubmissionStatus.Errored,
            _WorkspaceSubmissionStatus.Running,
            _WorkspaceSubmissionStatus.Ran,
            _WorkspaceSubmissionStatus.Traced,
        ]:
            return self.root

    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _WorkspaceSubmissionStatus.Stopped,
                _WorkspaceSubmissionStatus.Errored,
                _WorkspaceSubmissionStatus.Running,
                _WorkspaceSubmissionStatus.Ran,
                _WorkspaceSubmissionStatus.Traced,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _WorkspaceSubmissionStatus.Stopped,
            _WorkspaceSubmissionStatus.Errored,
            _WorkspaceSubmissionStatus.Running,
            _WorkspaceSubmissionStatus.Ran,
            _WorkspaceSubmissionStatus.Traced,
        ]:
            return self.__root__

    def visit(
        self,
        stopped: typing.Callable[[], T_Result],
        errored: typing.Callable[[ErrorInfo], T_Result],
        running: typing.Callable[[RunningSubmissionState], T_Result],
        ran: typing.Callable[[WorkspaceRunDetails], T_Result],
        traced: typing.Callable[[WorkspaceRunDetails], T_Result],
    ) -> T_Result:
        if self.get_as_union().type == "stopped":
            return stopped()
        if self.get_as_union().type == "errored":
            return errored(self.get_as_union().value)
        if self.get_as_union().type == "running":
            return running(self.get_as_union().value)
        if self.get_as_union().type == "ran":
            return ran(WorkspaceRunDetails(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))
        if self.get_as_union().type == "traced":
            return traced(WorkspaceRunDetails(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))


class _WorkspaceSubmissionStatus:
    class Stopped(UniversalBaseModel):
        type: typing.Literal["stopped"] = "stopped"

    class Errored(UniversalBaseModel):
        type: typing.Literal["errored"] = "errored"
        value: ErrorInfo

    class Running(UniversalBaseModel):
        type: typing.Literal["running"] = "running"
        value: RunningSubmissionState

    class Ran(WorkspaceRunDetails):
        type: typing.Literal["ran"] = "ran"

        class Config:
            allow_population_by_field_name = True

    class Traced(WorkspaceRunDetails):
        type: typing.Literal["traced"] = "traced"

        class Config:
            allow_population_by_field_name = True
