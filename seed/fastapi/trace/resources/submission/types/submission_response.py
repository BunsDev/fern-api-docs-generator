# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel
from ...commons.types.problem_id import ProblemId
from .code_execution_update import (
    CodeExecutionUpdate as resources_submission_types_code_execution_update_CodeExecutionUpdate,
)
from .exception_info import ExceptionInfo
from .terminated_response import TerminatedResponse

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def server_initialized(self) -> SubmissionResponse:
        return SubmissionResponse(_SubmissionResponse.ServerInitialized(type="serverInitialized"))

    def problem_initialized(self, value: ProblemId) -> SubmissionResponse:
        return SubmissionResponse(_SubmissionResponse.ProblemInitialized(type="problemInitialized", value=value))

    def workspace_initialized(self) -> SubmissionResponse:
        return SubmissionResponse(_SubmissionResponse.WorkspaceInitialized(type="workspaceInitialized"))

    def server_errored(self, value: ExceptionInfo) -> SubmissionResponse:
        return SubmissionResponse(
            _SubmissionResponse.ServerErrored(**value.dict(exclude_unset=True), type="serverErrored")
        )

    def code_execution_update(
        self, value: resources_submission_types_code_execution_update_CodeExecutionUpdate
    ) -> SubmissionResponse:
        return SubmissionResponse(_SubmissionResponse.CodeExecutionUpdate(type="codeExecutionUpdate", value=value))

    def terminated(self, value: TerminatedResponse) -> SubmissionResponse:
        return SubmissionResponse(_SubmissionResponse.Terminated(**value.dict(exclude_unset=True), type="terminated"))


class SubmissionResponse(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _SubmissionResponse.ServerInitialized,
                _SubmissionResponse.ProblemInitialized,
                _SubmissionResponse.WorkspaceInitialized,
                _SubmissionResponse.ServerErrored,
                _SubmissionResponse.CodeExecutionUpdate,
                _SubmissionResponse.Terminated,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _SubmissionResponse.ServerInitialized,
            _SubmissionResponse.ProblemInitialized,
            _SubmissionResponse.WorkspaceInitialized,
            _SubmissionResponse.ServerErrored,
            _SubmissionResponse.CodeExecutionUpdate,
            _SubmissionResponse.Terminated,
        ]:
            return self.root

    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _SubmissionResponse.ServerInitialized,
                _SubmissionResponse.ProblemInitialized,
                _SubmissionResponse.WorkspaceInitialized,
                _SubmissionResponse.ServerErrored,
                _SubmissionResponse.CodeExecutionUpdate,
                _SubmissionResponse.Terminated,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _SubmissionResponse.ServerInitialized,
            _SubmissionResponse.ProblemInitialized,
            _SubmissionResponse.WorkspaceInitialized,
            _SubmissionResponse.ServerErrored,
            _SubmissionResponse.CodeExecutionUpdate,
            _SubmissionResponse.Terminated,
        ]:
            return self.__root__

    def visit(
        self,
        server_initialized: typing.Callable[[], T_Result],
        problem_initialized: typing.Callable[[ProblemId], T_Result],
        workspace_initialized: typing.Callable[[], T_Result],
        server_errored: typing.Callable[[ExceptionInfo], T_Result],
        code_execution_update: typing.Callable[
            [resources_submission_types_code_execution_update_CodeExecutionUpdate], T_Result
        ],
        terminated: typing.Callable[[TerminatedResponse], T_Result],
    ) -> T_Result:
        if self.get_as_union().type == "serverInitialized":
            return server_initialized()
        if self.get_as_union().type == "problemInitialized":
            return problem_initialized(self.get_as_union().value)
        if self.get_as_union().type == "workspaceInitialized":
            return workspace_initialized()
        if self.get_as_union().type == "serverErrored":
            return server_errored(ExceptionInfo(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))
        if self.get_as_union().type == "codeExecutionUpdate":
            return code_execution_update(self.get_as_union().value)
        if self.get_as_union().type == "terminated":
            return terminated(TerminatedResponse(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))


class _SubmissionResponse:
    class ServerInitialized(UniversalBaseModel):
        type: typing.Literal["serverInitialized"] = "serverInitialized"

    class ProblemInitialized(UniversalBaseModel):
        type: typing.Literal["problemInitialized"] = "problemInitialized"
        value: ProblemId

    class WorkspaceInitialized(UniversalBaseModel):
        type: typing.Literal["workspaceInitialized"] = "workspaceInitialized"

    class ServerErrored(ExceptionInfo):
        type: typing.Literal["serverErrored"] = "serverErrored"

        class Config:
            allow_population_by_field_name = True

    class CodeExecutionUpdate(UniversalBaseModel):
        type: typing.Literal["codeExecutionUpdate"] = "codeExecutionUpdate"
        value: resources_submission_types_code_execution_update_CodeExecutionUpdate

    class Terminated(TerminatedResponse):
        type: typing.Literal["terminated"] = "terminated"

        class Config:
            allow_population_by_field_name = True
