# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel
from ...commons.types.variable_value import VariableValue
from .exception_info import ExceptionInfo
from .exception_v_2 import ExceptionV2 as resources_submission_types_exception_v_2_ExceptionV2

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def value(self, value: VariableValue) -> ActualResult:
        return ActualResult(_ActualResult.Value(type="value", value=value))

    def exception(self, value: ExceptionInfo) -> ActualResult:
        return ActualResult(_ActualResult.Exception(**value.dict(exclude_unset=True), type="exception"))

    def exception_v_2(self, value: resources_submission_types_exception_v_2_ExceptionV2) -> ActualResult:
        return ActualResult(_ActualResult.ExceptionV2(type="exceptionV2", value=value))


class ActualResult(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_ActualResult.Value, _ActualResult.Exception, _ActualResult.ExceptionV2],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_ActualResult.Value, _ActualResult.Exception, _ActualResult.ExceptionV2]:
            return self.root

    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_ActualResult.Value, _ActualResult.Exception, _ActualResult.ExceptionV2],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_ActualResult.Value, _ActualResult.Exception, _ActualResult.ExceptionV2]:
            return self.__root__

    def visit(
        self,
        value: typing.Callable[[VariableValue], T_Result],
        exception: typing.Callable[[ExceptionInfo], T_Result],
        exception_v_2: typing.Callable[[resources_submission_types_exception_v_2_ExceptionV2], T_Result],
    ) -> T_Result:
        if self.get_as_union().type == "value":
            return value(self.get_as_union().value)
        if self.get_as_union().type == "exception":
            return exception(ExceptionInfo(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))
        if self.get_as_union().type == "exceptionV2":
            return exception_v_2(self.get_as_union().value)


class _ActualResult:
    class Value(UniversalBaseModel):
        type: typing.Literal["value"] = "value"
        value: VariableValue

    class Exception(ExceptionInfo):
        type: typing.Literal["exception"] = "exception"

        class Config:
            allow_population_by_field_name = True

    class ExceptionV2(UniversalBaseModel):
        type: typing.Literal["exceptionV2"] = "exceptionV2"
        value: resources_submission_types_exception_v_2_ExceptionV2
