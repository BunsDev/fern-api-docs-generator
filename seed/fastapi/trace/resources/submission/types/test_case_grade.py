# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel
from .test_case_hidden_grade import TestCaseHiddenGrade
from .test_case_non_hidden_grade import TestCaseNonHiddenGrade

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def hidden(self, value: TestCaseHiddenGrade) -> TestCaseGrade:
        return TestCaseGrade(_TestCaseGrade.Hidden(**value.dict(exclude_unset=True), type="hidden"))

    def non_hidden(self, value: TestCaseNonHiddenGrade) -> TestCaseGrade:
        return TestCaseGrade(_TestCaseGrade.NonHidden(**value.dict(exclude_unset=True), type="nonHidden"))


class TestCaseGrade(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_TestCaseGrade.Hidden, _TestCaseGrade.NonHidden], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_TestCaseGrade.Hidden, _TestCaseGrade.NonHidden]:
            return self.root

    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_TestCaseGrade.Hidden, _TestCaseGrade.NonHidden], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_TestCaseGrade.Hidden, _TestCaseGrade.NonHidden]:
            return self.__root__

    def visit(
        self,
        hidden: typing.Callable[[TestCaseHiddenGrade], T_Result],
        non_hidden: typing.Callable[[TestCaseNonHiddenGrade], T_Result],
    ) -> T_Result:
        if self.get_as_union().type == "hidden":
            return hidden(TestCaseHiddenGrade(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))
        if self.get_as_union().type == "nonHidden":
            return non_hidden(TestCaseNonHiddenGrade(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))


class _TestCaseGrade:
    class Hidden(TestCaseHiddenGrade):
        type: typing.Literal["hidden"] = "hidden"

        class Config:
            allow_population_by_field_name = True

    class NonHidden(TestCaseNonHiddenGrade):
        type: typing.Literal["nonHidden"] = "nonHidden"

        class Config:
            allow_population_by_field_name = True
