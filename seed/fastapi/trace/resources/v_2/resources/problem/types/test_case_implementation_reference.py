# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel
from .test_case_implementation import TestCaseImplementation
from .test_case_template_id import TestCaseTemplateId

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def template_id(self, value: TestCaseTemplateId) -> TestCaseImplementationReference:
        return TestCaseImplementationReference(
            _TestCaseImplementationReference.TemplateId(type="templateId", value=value)
        )

    def implementation(self, value: TestCaseImplementation) -> TestCaseImplementationReference:
        return TestCaseImplementationReference(
            _TestCaseImplementationReference.Implementation(**value.dict(exclude_unset=True), type="implementation")
        )


class TestCaseImplementationReference(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation]:
            return self.root

    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_TestCaseImplementationReference.TemplateId, _TestCaseImplementationReference.Implementation]:
            return self.__root__

    def visit(
        self,
        template_id: typing.Callable[[TestCaseTemplateId], T_Result],
        implementation: typing.Callable[[TestCaseImplementation], T_Result],
    ) -> T_Result:
        if self.get_as_union().type == "templateId":
            return template_id(self.get_as_union().value)
        if self.get_as_union().type == "implementation":
            return implementation(
                TestCaseImplementation(**self.get_as_union().dict(exclude_unset=True, exclude={"type"}))
            )


class _TestCaseImplementationReference:
    class TemplateId(UniversalBaseModel):
        type: typing.Literal["templateId"] = "templateId"
        value: TestCaseTemplateId

    class Implementation(TestCaseImplementation):
        type: typing.Literal["implementation"] = "implementation"

        class Config:
            allow_population_by_field_name = True
