# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ......core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel
from .non_void_function_signature import NonVoidFunctionSignature
from .void_function_signature import VoidFunctionSignature
from .void_function_signature_that_takes_actual_result import VoidFunctionSignatureThatTakesActualResult

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def void(self, value: VoidFunctionSignature) -> FunctionSignature:
        return FunctionSignature(_FunctionSignature.Void(**value.dict(exclude_unset=True), type="void"))

    def non_void(self, value: NonVoidFunctionSignature) -> FunctionSignature:
        return FunctionSignature(_FunctionSignature.NonVoid(**value.dict(exclude_unset=True), type="nonVoid"))

    def void_that_takes_actual_result(self, value: VoidFunctionSignatureThatTakesActualResult) -> FunctionSignature:
        return FunctionSignature(
            _FunctionSignature.VoidThatTakesActualResult(
                **value.dict(exclude_unset=True), type="voidThatTakesActualResult"
            )
        )


class FunctionSignature(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _FunctionSignature.Void, _FunctionSignature.NonVoid, _FunctionSignature.VoidThatTakesActualResult
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _FunctionSignature.Void, _FunctionSignature.NonVoid, _FunctionSignature.VoidThatTakesActualResult
        ]:
            return self.root

    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _FunctionSignature.Void, _FunctionSignature.NonVoid, _FunctionSignature.VoidThatTakesActualResult
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _FunctionSignature.Void, _FunctionSignature.NonVoid, _FunctionSignature.VoidThatTakesActualResult
        ]:
            return self.__root__

    def visit(
        self,
        void: typing.Callable[[VoidFunctionSignature], T_Result],
        non_void: typing.Callable[[NonVoidFunctionSignature], T_Result],
        void_that_takes_actual_result: typing.Callable[[VoidFunctionSignatureThatTakesActualResult], T_Result],
    ) -> T_Result:
        if self.get_as_union().type == "void":
            return void(VoidFunctionSignature(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))
        if self.get_as_union().type == "nonVoid":
            return non_void(NonVoidFunctionSignature(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))
        if self.get_as_union().type == "voidThatTakesActualResult":
            return void_that_takes_actual_result(
                VoidFunctionSignatureThatTakesActualResult(
                    **self.get_as_union().dict(exclude_unset=True, exclude={"type"})
                )
            )


class _FunctionSignature:
    class Void(VoidFunctionSignature):
        type: typing.Literal["void"] = "void"

        class Config:
            allow_population_by_field_name = True

    class NonVoid(NonVoidFunctionSignature):
        type: typing.Literal["nonVoid"] = "nonVoid"

        class Config:
            allow_population_by_field_name = True

    class VoidThatTakesActualResult(VoidFunctionSignatureThatTakesActualResult):
        type: typing.Literal["voidThatTakesActualResult"] = "voidThatTakesActualResult"

        class Config:
            allow_population_by_field_name = True
