# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import HttpResponse, AsyncStreamResponseManager, AsyncHttpResponse, StreamResponseManager
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from .types.stream_response import StreamResponse

import json
from json.decoder import JSONDecodeError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawDummyClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def generate_stream(
        self, *, num_events: int, request_options: typing.Optional[RequestOptions] = None
    ) -> StreamResponseManager[StreamResponse]:
        class ResponseIterator:
            def __init__(self, response):
                self.response = response
                
            def __iter__(self):
                return self
                
            def __next__(self):
                for text in self.response.iter_lines():
                    try:
                        if len(text) == 0:
                            continue
                        return typing.cast(
                            StreamResponse,
                            parse_obj_as(
                                type_=StreamResponse,  # type: ignore
                                object_=json.loads(text),
                            ),
                        )
                    except Exception:
                        pass
                
                try:
                    self.response.read()
                    response_json = self.response.json()
                except JSONDecodeError:
                    raise ApiError(status_code=self.response.status_code, body=self.response.text)
                
                if 200 <= self.response.status_code < 300:
                    raise StopIteration
                raise ApiError(status_code=self.response.status_code, body=response_json)
            
        def _stream_func() -> HttpResponse[typing.Iterator[StreamResponse]]:
            with self._client_wrapper.httpx_client.stream(
                "generate-stream",
                method="POST",
                json={
                    "num_events": num_events,
                    "stream": True, 
                },
                request_options=request_options,
                omit=OMIT,
            ) as _response:
                return HttpResponse(
                    response=_response,
                    data=ResponseIterator(_response)
                )
        
        return StreamResponseManager(
            stream_func=_stream_func
        )
    
    def generate(
        self,
        *,
        num_events: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[StreamResponse]:
        _response = self._client_wrapper.httpx_client.request(
            "generate",
            method="POST",
            json={
                "num_events": num_events,
                "stream": False,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(
                    response=_response,
                    data=typing.cast(
                        StreamResponse,
                        parse_obj_as(
                            type_=StreamResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawDummyClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def generate_stream(
        self, *, num_events: int, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncStreamResponseManager[StreamResponse]:
        class AsyncResponseIterator:
            def __init__(self, response):
                self.response = response
                
            def __aiter__(self):
                return self

            async def __anext__(self):
                async for text in self.response.aiter_lines():
                    try:
                        if len(text) == 0:
                            continue
                        return typing.cast(
                            StreamResponse,
                            parse_obj_as(
                                type_=StreamResponse,  # type: ignore
                                object_=json.loads(text),
                            ),
                        )
                    except Exception:
                        pass
                try:
                    content = await self.response.aread()
                    response_json = json.loads(content)
                except JSONDecodeError:
                    raise ApiError(status_code=self.response.status_code, body=await self.response.atext())
                
                if 200 <= self.response.status_code < 300:
                    raise StopAsyncIteration
                raise ApiError(status_code=self.response.status_code, body=response_json)
            
        async def _stream_func() -> AsyncHttpResponse[typing.AsyncIterator[StreamResponse]]:
            async with self._client_wrapper.httpx_client.stream(
                "generate-stream",
                method="POST",
                json={
                    "num_events": num_events,
                    "stream": True, 
                },
                request_options=request_options,
                omit=OMIT,
            ) as _response:
                return AsyncHttpResponse(
                    response=_response,
                    data=AsyncResponseIterator(_response)
                )
        
        return AsyncStreamResponseManager(
            stream_func=_stream_func
        )
    
    async def generate(
        self,
        *,
        num_events: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[StreamResponse]:
        _response = await self._client_wrapper.httpx_client.request(
            "generate",
            method="POST",
            json={
                "num_events": num_events,
                "stream": False,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(
                    response=_response,
                    data=typing.cast(
                        StreamResponse,
                        parse_obj_as(
                            type_=StreamResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)