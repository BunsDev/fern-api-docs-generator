# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..core.stream_response_manager import StreamResponseManager
from .types.stream_response import StreamResponse
import json
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.http_response import HttpResponse
from ..core.unchecked_base_model import construct_type
from ..core.client_wrapper import AsyncClientWrapper
from ..core.stream_response_manager import AsyncStreamResponseManager
from ..core.http_response import AsyncHttpResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawDummyClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def generate_stream(
        self,
        *,
        num_events: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StreamResponseManager[typing.Iterator[StreamResponse]]:
        """
        Parameters
        ----------
        num_events : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        StreamResponseManager[typing.Iterator[StreamResponse]]

        Examples
        --------
        from seed import SeedStreaming

        client = SeedStreaming(
            base_url="https://yourhost.com/path/to/api",
        )
        response = client.dummy.generate_stream(
            num_events=1,
        )
        for chunk in response:
            yield chunk
        """
        with self._client_wrapper.httpx_client.stream(
            "generate-stream",
            method="POST",
            json={
                "num_events": num_events,
                "stream": True,
            },
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:

                    class ResponseIterator:
                        def __init__(self, response):
                            self.response = response

                        def __iter__(self):
                            return self

                        def __next__(self):
                            for _text in self.response.iter_lines():
                                try:
                                    if len(_text) == 0:
                                        continue
                                    return json.loads(_text)
                                except Exception:
                                    pass
                            try:
                                self.response.read()
                                response_json = self.response.json()
                            except JSONDecodeError:
                                raise ApiError(
                                    status_code=self.response.status_code,
                                    body=self.response.text,
                                )
                            if 200 <= self.response.status_code < 300:
                                raise StopIteration
                            raise ApiError(
                                status_code=self.response.status_code,
                                body=response_json,
                            )

                    def _stream_func() -> HttpResponse[typing.Iterator[typing.Any]]:
                        with self._client_wrapper.httpx_client.stream(
                            "TODO_PATH",
                            method="TODO_METHOD",
                            json={},
                            request_options=request_options,
                            omit=OMIT,
                        ) as _response:
                            return HttpResponse(response=_response, data=ResponseIterator(_response))

                    return StreamResponseManager(stream_func=_stream_func)
                _response.read()
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    def generate(
        self,
        *,
        num_events: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[StreamResponse]:
        """
        Parameters
        ----------
        num_events : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[StreamResponse]

        Examples
        --------
        from seed import SeedStreaming

        client = SeedStreaming(
            base_url="https://yourhost.com/path/to/api",
        )
        client.dummy.generate(
            num_events=5,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "generate",
            method="POST",
            json={
                "num_events": num_events,
                "stream": False,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                data = typing.cast(
                    StreamResponse,
                    construct_type(
                        type_=StreamResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawDummyClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def generate_stream(
        self,
        *,
        num_events: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncStreamResponseManager[typing.AsyncIterator[StreamResponse]]:
        """
        Parameters
        ----------
        num_events : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        AsyncStreamResponseManager[typing.AsyncIterator[StreamResponse]]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedStreaming

        client = AsyncSeedStreaming(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            response = await client.dummy.generate_stream(
                num_events=1,
            )
            async for chunk in response:
                yield chunk


        asyncio.run(main())
        """
        async with self._client_wrapper.httpx_client.stream(
            "generate-stream",
            method="POST",
            json={
                "num_events": num_events,
                "stream": True,
            },
            request_options=request_options,
            omit=OMIT,
        ) as _response:
            try:
                if 200 <= _response.status_code < 300:

                    class AsyncResponseIterator:
                        def __init__(self, response):
                            self.response = response

                        def __aiter__(self):
                            return self

                        async def __anext__(self):
                            async for _text in self.response.aiter_lines():
                                try:
                                    if len(_text) == 0:
                                        continue
                                    return json.loads(_text)
                                except Exception:
                                    pass
                            try:
                                await self.response.aread()
                                response_json = self.response.json()
                            except JSONDecodeError:
                                raise ApiError(
                                    status_code=self.response.status_code,
                                    body=await self.response.atext(),
                                )
                            if 200 <= self.response.status_code < 300:
                                raise StopAsyncIteration
                            raise ApiError(
                                status_code=self.response.status_code,
                                body=response_json,
                            )

                    async def _stream_func() -> AsyncHttpResponse[typing.AsyncIterator[typing.Any]]:
                        async with self._client_wrapper.httpx_client.stream(
                            "TODO_PATH",
                            method="TODO_METHOD",
                            json={},
                            request_options=request_options,
                            omit=OMIT,
                        ) as _response:
                            return AsyncHttpResponse(
                                response=_response,
                                data=AsyncResponseIterator(_response),
                            )

                    return AsyncStreamResponseManager(stream_func=_stream_func)
                await _response.aread()
                _response_json = _response.json()
            except JSONDecodeError:
                raise ApiError(status_code=_response.status_code, body=_response.text)
            raise ApiError(status_code=_response.status_code, body=_response_json)

    async def generate(
        self,
        *,
        num_events: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[StreamResponse]:
        """
        Parameters
        ----------
        num_events : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[StreamResponse]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedStreaming

        client = AsyncSeedStreaming(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.dummy.generate(
                num_events=5,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "generate",
            method="POST",
            json={
                "num_events": num_events,
                "stream": False,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                data = typing.cast(
                    StreamResponse,
                    construct_type(
                        type_=StreamResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
