{
    "types": {},
    "endpoints": [
        {
            "id": {
                "path": "/",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.test()\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.v_2.test()\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/admin/store-test-submission-status/{submissionId}",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nimport uuid\nfrom seed import TestSubmissionStatus\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.update_test_submission_status(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=TestSubmissionStatus(), )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nimport uuid\nfrom seed import TestSubmissionStatus\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.admin.update_test_submission_status(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=TestSubmissionStatus(), )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/admin/store-test-submission-status-v2/{submissionId}",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nimport uuid\nfrom seed import TestSubmissionUpdate\nimport datetime\nfrom seed import TestSubmissionUpdateInfo_Running\nfrom seed import RunningSubmissionState\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.send_test_submission_update(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=TestSubmissionUpdate(update_time=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), update_info=TestSubmissionUpdateInfo_Running(type=\"running\", value=RunningSubmissionState.QUEUEING_SUBMISSION), ), )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nimport uuid\nfrom seed import TestSubmissionUpdate\nimport datetime\nfrom seed import TestSubmissionUpdateInfo_Running\nfrom seed import RunningSubmissionState\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.admin.send_test_submission_update(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=TestSubmissionUpdate(update_time=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), update_info=TestSubmissionUpdateInfo_Running(type=\"running\", value=RunningSubmissionState.QUEUEING_SUBMISSION), ), )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/admin/store-workspace-submission-status/{submissionId}",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nimport uuid\nfrom seed import WorkspaceSubmissionStatus\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.update_workspace_submission_status(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=WorkspaceSubmissionStatus(), )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nimport uuid\nfrom seed import WorkspaceSubmissionStatus\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.admin.update_workspace_submission_status(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=WorkspaceSubmissionStatus(), )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/admin/store-workspace-submission-status-v2/{submissionId}",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nimport uuid\nfrom seed import WorkspaceSubmissionUpdate\nimport datetime\nfrom seed import WorkspaceSubmissionUpdateInfo_Running\nfrom seed import RunningSubmissionState\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.send_workspace_submission_update(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=WorkspaceSubmissionUpdate(update_time=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), update_info=WorkspaceSubmissionUpdateInfo_Running(type=\"running\", value=RunningSubmissionState.QUEUEING_SUBMISSION), ), )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nimport uuid\nfrom seed import WorkspaceSubmissionUpdate\nimport datetime\nfrom seed import WorkspaceSubmissionUpdateInfo_Running\nfrom seed import RunningSubmissionState\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.admin.send_workspace_submission_update(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=WorkspaceSubmissionUpdate(update_time=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), update_info=WorkspaceSubmissionUpdateInfo_Running(type=\"running\", value=RunningSubmissionState.QUEUEING_SUBMISSION), ), )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/admin/store-test-trace/submission/{submissionId}/testCase/{testCaseId}",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nimport uuid\nfrom seed import TestCaseResultWithStdout\nfrom seed import TestCaseResult\nfrom seed import TraceResponse\nfrom seed import DebugVariableValue_IntegerValue\nfrom seed import ExpressionLocation\nfrom seed import StackInformation\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.store_traced_test_case(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), test_case_id=\"string\", result=TestCaseResultWithStdout(result=TestCaseResult(), stdout=\"string\", ), trace_responses=[TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(type=\"integerValue\", value=1), expression_location=ExpressionLocation(), stack=StackInformation(), stdout=\"string\", )], )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nimport uuid\nfrom seed import TestCaseResultWithStdout\nfrom seed import TestCaseResult\nfrom seed import TraceResponse\nfrom seed import DebugVariableValue_IntegerValue\nfrom seed import ExpressionLocation\nfrom seed import StackInformation\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.admin.store_traced_test_case(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), test_case_id=\"string\", result=TestCaseResultWithStdout(result=TestCaseResult(), stdout=\"string\", ), trace_responses=[TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(type=\"integerValue\", value=1), expression_location=ExpressionLocation(), stack=StackInformation(), stdout=\"string\", )], )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/admin/store-test-trace-v2/submission/{submissionId}/testCase/{testCaseId}",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nimport uuid\nfrom seed import TraceResponseV2\nfrom seed import TracedFile\nfrom seed import DebugVariableValue_IntegerValue\nfrom seed import ExpressionLocation\nfrom seed import StackInformation\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.store_traced_test_case_v_2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), test_case_id=\"string\", request=[TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(), return_value=DebugVariableValue_IntegerValue(type=\"integerValue\", value=1), expression_location=ExpressionLocation(), stack=StackInformation(), stdout=\"string\", )], )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nimport uuid\nfrom seed import TraceResponseV2\nfrom seed import TracedFile\nfrom seed import DebugVariableValue_IntegerValue\nfrom seed import ExpressionLocation\nfrom seed import StackInformation\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.admin.store_traced_test_case_v_2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), test_case_id=\"string\", request=[TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(), return_value=DebugVariableValue_IntegerValue(type=\"integerValue\", value=1), expression_location=ExpressionLocation(), stack=StackInformation(), stdout=\"string\", )], )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/admin/store-workspace-trace/submission/{submissionId}",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nimport uuid\nfrom seed import WorkspaceRunDetails\nfrom seed import ExceptionV2_Generic\nfrom seed import ExceptionInfo\nfrom seed import TraceResponse\nfrom seed import DebugVariableValue_IntegerValue\nfrom seed import ExpressionLocation\nfrom seed import StackInformation\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.store_traced_workspace(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), workspace_run_details=WorkspaceRunDetails(exception_v_2=ExceptionV2_Generic(type=\"generic\", ), exception=ExceptionInfo(), stdout=\"string\", ), trace_responses=[TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(type=\"integerValue\", value=1), expression_location=ExpressionLocation(), stack=StackInformation(), stdout=\"string\", )], )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nimport uuid\nfrom seed import WorkspaceRunDetails\nfrom seed import ExceptionV2_Generic\nfrom seed import ExceptionInfo\nfrom seed import TraceResponse\nfrom seed import DebugVariableValue_IntegerValue\nfrom seed import ExpressionLocation\nfrom seed import StackInformation\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.admin.store_traced_workspace(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), workspace_run_details=WorkspaceRunDetails(exception_v_2=ExceptionV2_Generic(type=\"generic\", ), exception=ExceptionInfo(), stdout=\"string\", ), trace_responses=[TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(type=\"integerValue\", value=1), expression_location=ExpressionLocation(), stack=StackInformation(), stdout=\"string\", )], )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/admin/store-workspace-trace-v2/submission/{submissionId}",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nimport uuid\nfrom seed import TraceResponseV2\nfrom seed import TracedFile\nfrom seed import DebugVariableValue_IntegerValue\nfrom seed import ExpressionLocation\nfrom seed import StackInformation\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.store_traced_workspace_v_2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=[TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(), return_value=DebugVariableValue_IntegerValue(type=\"integerValue\", value=1), expression_location=ExpressionLocation(), stack=StackInformation(), stdout=\"string\", )], )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nimport uuid\nfrom seed import TraceResponseV2\nfrom seed import TracedFile\nfrom seed import DebugVariableValue_IntegerValue\nfrom seed import ExpressionLocation\nfrom seed import StackInformation\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.admin.store_traced_workspace_v_2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=[TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(), return_value=DebugVariableValue_IntegerValue(type=\"integerValue\", value=1), expression_location=ExpressionLocation(), stack=StackInformation(), stdout=\"string\", )], )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/homepage-problems",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.homepage.get_homepage_problems()\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.homepage.get_homepage_problems()\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/homepage-problems",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.homepage.set_homepage_problems(request=[\"string\"], )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.homepage.set_homepage_problems(request=[\"string\"], )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/migration-info/all",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.migration.get_attempted_migrations(admin_key_header=\"string\", )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.migration.get_attempted_migrations(admin_key_header=\"string\", )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/v2/playlist/{serviceParam}/create",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nimport datetime\nfrom seed import PlaylistCreateRequest\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.playlist.create_playlist(service_param=1, datetime=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), optional_datetime=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), request=PlaylistCreateRequest(name=\"string\", problems=[\"string\"], ), )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nimport datetime\nfrom seed import PlaylistCreateRequest\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.playlist.create_playlist(service_param=1, datetime=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), optional_datetime=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), request=PlaylistCreateRequest(name=\"string\", problems=[\"string\"], ), )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/v2/playlist/{serviceParam}/all",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.playlist.get_playlists(service_param=1, limit=1, other_field=\"string\", multi_line_docs=\"string\", optional_multiple_field=\"string\", multiple_field=\"string\", )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.playlist.get_playlists(service_param=1, limit=1, other_field=\"string\", multi_line_docs=\"string\", optional_multiple_field=\"string\", multiple_field=\"string\", )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/v2/playlist/{serviceParam}/{playlistId}",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.playlist.get_playlist(service_param=1, playlist_id=\"string\", )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.playlist.get_playlist(service_param=1, playlist_id=\"string\", )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/v2/playlist/{serviceParam}/{playlistId}",
                "method": "PUT"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nfrom seed import UpdatePlaylistRequest\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.playlist.update_playlist(service_param=1, playlist_id=\"string\", request=UpdatePlaylistRequest(name=\"string\", problems=[\"string\"], ), )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nfrom seed import UpdatePlaylistRequest\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.playlist.update_playlist(service_param=1, playlist_id=\"string\", request=UpdatePlaylistRequest(name=\"string\", problems=[\"string\"], ), )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/v2/playlist/{serviceParam}/{playlist_id}",
                "method": "DELETE"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.playlist.delete_playlist(service_param=1, playlist_id=\"string\", )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.playlist.delete_playlist(service_param=1, playlist_id=\"string\", )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problem-crud/create",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nfrom seed import CreateProblemRequest\nfrom seed import ProblemDescription\nfrom seed import ProblemDescriptionBoard_Html\nfrom seed import Language\nfrom seed import ProblemFiles\nfrom seed import FileInfo\nfrom seed import VariableTypeAndName\nfrom seed import VariableType\nfrom seed import TestCaseWithExpectedResult\nfrom seed import TestCase\nfrom seed import VariableValue_IntegerValue\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.problem.create_problem(request=CreateProblemRequest(problem_name=\"string\", problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(type=\"html\", value=\"string\")], ), files={Language.JAVA: ProblemFiles(solution_file=FileInfo(filename=\"string\", contents=\"string\", ), read_only_files=[FileInfo(filename=\"string\", contents=\"string\", )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name=\"string\", )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id=\"string\", params=[VariableValue_IntegerValue(type=\"integerValue\", value=1)], ), expected_result=VariableValue_IntegerValue(type=\"integerValue\", value=1), )], method_name=\"string\", ), )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nfrom seed import CreateProblemRequest\nfrom seed import ProblemDescription\nfrom seed import ProblemDescriptionBoard_Html\nfrom seed import Language\nfrom seed import ProblemFiles\nfrom seed import FileInfo\nfrom seed import VariableTypeAndName\nfrom seed import VariableType\nfrom seed import TestCaseWithExpectedResult\nfrom seed import TestCase\nfrom seed import VariableValue_IntegerValue\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.problem.create_problem(request=CreateProblemRequest(problem_name=\"string\", problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(type=\"html\", value=\"string\")], ), files={Language.JAVA: ProblemFiles(solution_file=FileInfo(filename=\"string\", contents=\"string\", ), read_only_files=[FileInfo(filename=\"string\", contents=\"string\", )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name=\"string\", )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id=\"string\", params=[VariableValue_IntegerValue(type=\"integerValue\", value=1)], ), expected_result=VariableValue_IntegerValue(type=\"integerValue\", value=1), )], method_name=\"string\", ), )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problem-crud/update/{problemId}",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nfrom seed import CreateProblemRequest\nfrom seed import ProblemDescription\nfrom seed import ProblemDescriptionBoard_Html\nfrom seed import Language\nfrom seed import ProblemFiles\nfrom seed import FileInfo\nfrom seed import VariableTypeAndName\nfrom seed import VariableType\nfrom seed import TestCaseWithExpectedResult\nfrom seed import TestCase\nfrom seed import VariableValue_IntegerValue\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.problem.update_problem(problem_id=\"string\", request=CreateProblemRequest(problem_name=\"string\", problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(type=\"html\", value=\"string\")], ), files={Language.JAVA: ProblemFiles(solution_file=FileInfo(filename=\"string\", contents=\"string\", ), read_only_files=[FileInfo(filename=\"string\", contents=\"string\", )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name=\"string\", )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id=\"string\", params=[VariableValue_IntegerValue(type=\"integerValue\", value=1)], ), expected_result=VariableValue_IntegerValue(type=\"integerValue\", value=1), )], method_name=\"string\", ), )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nfrom seed import CreateProblemRequest\nfrom seed import ProblemDescription\nfrom seed import ProblemDescriptionBoard_Html\nfrom seed import Language\nfrom seed import ProblemFiles\nfrom seed import FileInfo\nfrom seed import VariableTypeAndName\nfrom seed import VariableType\nfrom seed import TestCaseWithExpectedResult\nfrom seed import TestCase\nfrom seed import VariableValue_IntegerValue\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.problem.update_problem(problem_id=\"string\", request=CreateProblemRequest(problem_name=\"string\", problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(type=\"html\", value=\"string\")], ), files={Language.JAVA: ProblemFiles(solution_file=FileInfo(filename=\"string\", contents=\"string\", ), read_only_files=[FileInfo(filename=\"string\", contents=\"string\", )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name=\"string\", )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id=\"string\", params=[VariableValue_IntegerValue(type=\"integerValue\", value=1)], ), expected_result=VariableValue_IntegerValue(type=\"integerValue\", value=1), )], method_name=\"string\", ), )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problem-crud/delete/{problemId}",
                "method": "DELETE"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.problem.delete_problem(problem_id=\"string\", )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.problem.delete_problem(problem_id=\"string\", )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problem-crud/default-starter-files",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nfrom seed import VariableTypeAndName\nfrom seed import VariableType\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.problem.get_default_starter_files(input_params=[VariableTypeAndName(variable_type=VariableType(), name=\"string\", )], output_type=VariableType(), method_name=\"string\", )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nfrom seed import VariableTypeAndName\nfrom seed import VariableType\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.problem.get_default_starter_files(input_params=[VariableTypeAndName(variable_type=VariableType(), name=\"string\", )], output_type=VariableType(), method_name=\"string\", )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/sessions/create-session/{language}",
                "method": "POST"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nfrom seed import Language\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.submission.create_execution_session(language=Language.JAVA, )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nfrom seed import Language\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.submission.create_execution_session(language=Language.JAVA, )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/sessions/{sessionId}",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.submission.get_execution_session(session_id=\"string\", )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.submission.get_execution_session(session_id=\"string\", )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/sessions/stop/{sessionId}",
                "method": "DELETE"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.submission.stop_execution_session(session_id=\"string\", )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.submission.stop_execution_session(session_id=\"string\", )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/sessions/execution-sessions-state",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.submission.get_execution_sessions_state()\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.submission.get_execution_sessions_state()\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/sysprop/num-warm-instances/{language}/{numWarmInstances}",
                "method": "PUT"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nfrom seed import Language\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.sysprop.set_num_warm_instances(language=Language.JAVA, num_warm_instances=1, )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nfrom seed import Language\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.sysprop.set_num_warm_instances(language=Language.JAVA, num_warm_instances=1, )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/sysprop/num-warm-instances",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.sysprop.get_num_warm_instances()\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.sysprop.get_num_warm_instances()\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problems-v2/lightweight-problem-info",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.problem.get_lightweight_problems()\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.v_2.problem.get_lightweight_problems()\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problems-v2/problem-info",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.problem.get_problems()\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.v_2.problem.get_problems()\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problems-v2/problem-info/{problemId}",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.problem.get_latest_problem(problem_id=\"string\", )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.v_2.problem.get_latest_problem(problem_id=\"string\", )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problems-v2/problem-info/{problemId}/version/{problemVersion}",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.problem.get_problem_version(problem_id=\"string\", problem_version=1, )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.v_2.problem.get_problem_version(problem_id=\"string\", problem_version=1, )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problems-v2/lightweight-problem-info",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.v_3.problem.get_lightweight_problems()\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.v_2.v_3.problem.get_lightweight_problems()\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problems-v2/problem-info",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.v_3.problem.get_problems()\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.v_2.v_3.problem.get_problems()\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problems-v2/problem-info/{problemId}",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.v_3.problem.get_latest_problem(problem_id=\"string\", )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.v_2.v_3.problem.get_latest_problem(problem_id=\"string\", )\n",
                "type": "python"
            }
        },
        {
            "id": {
                "path": "/problems-v2/problem-info/{problemId}/version/{problemVersion}",
                "method": "GET"
            },
            "snippet": {
                "sync_client": "from seed.client import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.v_3.problem.get_problem_version(problem_id=\"string\", problem_version=1, )\n",
                "async_client": "from seed.client import AsyncSeedTrace\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nawait client.v_2.v_3.problem.get_problem_version(problem_id=\"string\", problem_version=1, )\n",
                "type": "python"
            }
        }
    ]
}