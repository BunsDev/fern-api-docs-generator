# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.movie_id import MovieId
from .types.movie import Movie
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawImdbClient, RawImdbClient



class ImdbClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawImdbClient(client_wrapper=client_wrapper)
    
    def with_raw_response(self) -> RawImdbClient:
        """
        Access the raw client whenever HTTP response metadata is needed.
        """
        return self._raw_client

    def create_movie(
        self,
        *,
        title: str,
        rating: float,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MovieId:
        """
        Add a movie to the database using the movies/* /... path.

        Parameters
        ----------
        title : str

        rating : float

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MovieId

        Examples
        --------
        from seed import SeedApi

        client = SeedApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.imdb.create_movie(
            title="title",
            rating=1.1,
        )
        """
        return self._raw_client.create_movie(
            title=title,
            rating=rating,
            request_options=request_options,
        ).data

    def get_movie(
        self,
        movie_id: MovieId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Movie:
        """
        Parameters
        ----------
        movie_id : MovieId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Movie

        Examples
        --------
        from seed import SeedApi

        client = SeedApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.imdb.get_movie(x
            movie_id="movieId",
        )
        """
        return self._raw_client.get_movie(
            movie_id=movie_id,
            request_options=request_options,
        ).data





class AsyncImdbClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawImdbClient(client_wrapper=client_wrapper)

    def with_raw_response(self) -> AsyncRawImdbClient:
        """
        Access the raw client whenever HTTP response metadata is needed.
        """
        return self._raw_client

    async def create_movie(
        self,
        *,
        title: str,
        rating: float,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MovieId:
        """
        Add a movie to the database using the movies/* /... path.

        Parameters
        ----------
        title : str

        rating : float

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MovieId

        Examples
        --------
        from seed import SeedApi

        client = SeedApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.imdb.create_movie(
            title="title",
            rating=1.1,
        )
        """
        response = await self._raw_client.create_movie(
            title=title,
            rating=rating,
            request_options=request_options,
        )
        return response.data

    async def get_movie(
        self,
        movie_id: MovieId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Movie:
        """
        Parameters
        ----------
        movie_id : MovieId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Movie

        Examples
        --------
        from seed import SeedApi

        client = SeedApi(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.imdb.get_movie(
            movie_id="movieId",
        )
        """
        response = await self._raw_client.get_movie(
            movie_id=movie_id,
            request_options=request_options,
        )
        return response.data