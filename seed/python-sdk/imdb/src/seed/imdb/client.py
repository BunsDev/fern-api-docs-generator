# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.request_options import RequestOptions
from .types.movie_id import MovieId
from .types.movie import Movie
from .raw_client import RawImdbClient, AsyncRawImdbClient


class ImdbClient:
    def __init__(self, *, raw_client: RawImdbClient):
        self._raw_client = raw_client

    @property
    def with_raw_response(self) -> RawImdbClient:
        """
        Get a version of this client that returns the raw responses instead of extracting the response data.

        Returns
        -------
        RawImdbClient
        """
        return self._raw_client

    def create_movie(
        self,
        *,
        title: str,
        rating: float,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MovieId:
        """
        Add a movie to the database using the movies/* /... path.

        Parameters
        ----------
        title : str

        rating : float

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MovieId
        """
        response = self._raw_client.create_movie(
            title=title,
            rating=rating,
            request_options=request_options,
        )
        return response.data

    def get_movie(
        self,
        movie_id: MovieId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Movie:
        """
        Parameters
        ----------
        movie_id : MovieId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Movie
        """
        response = self._raw_client.get_movie(
            movie_id,
            request_options=request_options,
        )
        return response.data


class AsyncImdbClient:
    def __init__(self, *, raw_client: AsyncRawImdbClient):
        self._raw_client = raw_client

    @property
    def with_raw_response(self) -> AsyncRawImdbClient:
        """
        Get a version of this client that returns the raw responses instead of extracting the response data.

        Returns
        -------
        AsyncRawImdbClient
        """
        return self._raw_client

    async def create_movie(
        self,
        *,
        title: str,
        rating: float,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MovieId:
        """
        Add a movie to the database using the movies/* /... path.

        Parameters
        ----------
        title : str

        rating : float

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MovieId
        """
        response = await self._raw_client.create_movie(
            title=title,
            rating=rating,
            request_options=request_options,
        )
        return response.data

    async def get_movie(
        self,
        movie_id: MovieId,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Movie:
        """
        Parameters
        ----------
        movie_id : MovieId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Movie
        """
        response = await self._raw_client.get_movie(
            movie_id,
            request_options=request_options,
        )
        return response.data
