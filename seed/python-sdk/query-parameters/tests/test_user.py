# This file was auto-generated by Fern from our API Definition.

import datetime
import typing
import uuid

from seed import NestedUser, User
from seed.client import AsyncSeedQueryParameters, SeedQueryParameters

from .utilities import validate_response


<<<<<<< HEAD
async def test_get_username(client: SeedQueryParameters, async_client: AsyncSeedQueryParameters) -> None:
    expected_response: typing.Any = {"name": "string", "tags": ["string"]}
    expected_types: typing.Any = {"name": None, "tags": ("list", {0: None})}
    response = client.user.get_username(
        limit=1,
        id=uuid.UUID("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
        date=datetime.date.fromisoformat("2023-01-15"),
        deadline=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00"),
        bytes="SGVsbG8gd29ybGQh",
        user=User(name="string", tags=["string"]),
        key_value={"string": "string"},
        optional_string="string",
        nested_user=NestedUser(name="string", user=User(name="string", tags=["string"])),
        optional_user=User(name="string", tags=["string"]),
        exclude_user=User(name="string", tags=["string"]),
        filter="string",
    )
=======
async def test_get_username_some_query_parameters(
    client: SeedQueryParameters, async_client: AsyncSeedQueryParameters
) -> None:
    expected_response = {"name": "Deep", "tags": []}
    expected_types: typing.Any = {"name": None, "tags": ("list", {})}
    response = client.user.get_username(limit=5, id=uuid.UUID("4ff45b32-ca63-462d-b988-cf4eec41397a"))
>>>>>>> 5b2898bf65 (generate tests for multiple examples)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.user.get_username(limit=5, id=uuid.UUID("4ff45b32-ca63-462d-b988-cf4eec41397a"))
    validate_response(async_response, expected_response, expected_types)


async def test_get_username_generated(client: SeedQueryParameters, async_client: AsyncSeedQueryParameters) -> None:
    expected_response = {"name": "Deep", "tags": []}
    expected_types: typing.Any = {"name": None, "tags": ("list", {})}
    response = client.user.get_username(
        limit=1,
        id=uuid.UUID("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
        date=datetime.date.fromisoformat("2023-01-15"),
        deadline=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00"),
        bytes="SGVsbG8gd29ybGQh",
        user=User(name="Deep", tags=[]),
        key_value={"string": "string"},
        optional_string="string",
        nested_user=NestedUser(name="string", user=User(name="Deep", tags=[])),
        optional_user=User(name="Deep", tags=[]),
        exclude_user=User(name="Deep", tags=[]),
        filter="string",
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.user.get_username(
        limit=1,
        id=uuid.UUID("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
        date=datetime.date.fromisoformat("2023-01-15"),
        deadline=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00"),
        bytes="SGVsbG8gd29ybGQh",
        user=User(name="Deep", tags=[]),
        key_value={"string": "string"},
        optional_string="string",
        nested_user=NestedUser(name="string", user=User(name="Deep", tags=[])),
        optional_user=User(name="Deep", tags=[]),
        exclude_user=User(name="Deep", tags=[]),
        filter="string",
    )
    validate_response(async_response, expected_response, expected_types)
