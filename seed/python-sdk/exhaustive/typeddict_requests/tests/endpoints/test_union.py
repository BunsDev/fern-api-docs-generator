# This file was auto-generated by Fern from our API Definition.

import typing
from typing_extensions import get_type_hints
import typing_extensions

from seed import AsyncSeedExhaustive, SeedExhaustive
from seed.core import jsonable_encoder
from seed.core.serialization import FieldMetadata, convert_object
from seed.types.object.requests.object_with_optional_field import ObjectWithOptionalFieldParams

from ..utilities import validate_response


async def test_get_and_return_union(client: SeedExhaustive, async_client: AsyncSeedExhaustive) -> None:
    t: ObjectWithOptionalFieldParams = {
        "integer": 1,
        "long_": 12341232
    }

    # for key, value in t.items():
    #     print(key, value)
    #     print(get_type_hints(type(value), include_extras=True))
    # print(jsonable_encoder(t))
    # annotations = typing_extensions.get_type_hints(ObjectWithOptionalFieldParams, include_extras=True)
    # for key, value in t.items():
    #     type_ = annotations.get(key)
    #     print(key, type_)
    #     print(_transform_key(key, type_))
    print("convertin", convert_object(object_=t, annotation=ObjectWithOptionalFieldParams))
    expected_response: typing.Any = {"animal": "dog", "name": "string", "likesToWoof": True}
    expected_types: typing.Any = "no_validate"
    response = client.endpoints.union.get_and_return_union(
        request={"name": "string", "likes_to_woof": True, "animal": "dog"}
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.endpoints.union.get_and_return_union(
        request={"name": "string", "likes_to_woof": True, "animal": "dog"}
    )
    validate_response(async_response, expected_response, expected_types)
