# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing
import uuid

import typing_extensions

from ....core.serialization import FieldMetadata


class ObjectWithOptionalFieldParams(typing_extensions.TypedDict):
    string: typing_extensions.NotRequired[str | None]
    """
    This is a rather long descriptor of this single field in a more complex type. If you ask me I think this is a pretty good description for this field all things considered.
    """

    integer: typing_extensions.NotRequired[int | None]
    long_: typing_extensions.Annotated[typing_extensions.NotRequired[int | None], FieldMetadata(alias="long")]
    double: typing_extensions.NotRequired[float | None]
    bool_: typing_extensions.Annotated[typing_extensions.NotRequired[bool | None], FieldMetadata(alias="bool")]
    datetime: typing_extensions.NotRequired[dt.datetime | None]
    date: typing_extensions.NotRequired[dt.date | None]
    uuid_: typing_extensions.Annotated[typing_extensions.NotRequired[uuid.UUID | None], FieldMetadata(alias="uuid")]
    base_64: typing_extensions.Annotated[typing_extensions.NotRequired[str | None], FieldMetadata(alias="base64")]
    list_: typing_extensions.Annotated[
        typing_extensions.NotRequired[typing.Sequence[str] | None], FieldMetadata(alias="list")
    ]
    set_: typing_extensions.Annotated[typing_extensions.NotRequired[typing.Set[str] | None], FieldMetadata(alias="set")]
    map_: typing_extensions.Annotated[
        typing_extensions.NotRequired[typing.Dict[int, str] | None], FieldMetadata(alias="map")
    ]
    bigint: typing_extensions.NotRequired[str | None]
