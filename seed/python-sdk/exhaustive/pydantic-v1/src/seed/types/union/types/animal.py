# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class Animal_Dog(UniversalBaseModel):
    name: str
    likes_to_woof: bool = pydantic.Field(alias="likesToWoof")
    animal: typing.Literal["dog"] = "dog"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            populate_by_name=True, extra="allow", frozen=True
        )
    else:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            allow_population_by_field_name=True, extra=pydantic.Extra.allow, frozen=True, smart_union=True
        )


class Animal_Cat(UniversalBaseModel):
    name: str
    likes_to_meow: bool = pydantic.Field(alias="likesToMeow")
    animal: typing.Literal["cat"] = "cat"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            populate_by_name=True, extra="allow", frozen=True
        )
    else:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            allow_population_by_field_name=True, extra=pydantic.Extra.allow, frozen=True, smart_union=True
        )


Animal = typing.Union[Animal_Dog, Animal_Cat]
