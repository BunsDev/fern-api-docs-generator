# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .cat import Cat as types_union_types_cat_Cat
from .dog import Dog as types_union_types_dog_Dog

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def dog(self, value: types_union_types_dog_Dog) -> Animal:
        return Animal(_Animal.Dog(**value.dict(exclude_unset=True), animal="dog"))

    def cat(self, value: types_union_types_cat_Cat) -> Animal:
        return Animal(_Animal.Cat(**value.dict(exclude_unset=True), animal="cat"))


if IS_PYDANTIC_V2:

    class _AnimalBase(pydantic.RootModel, UniversalBaseModel):

        root: typing_extensions.Annotated[
            typing.Union[_Animal.Dog, _Animal.Cat], pydantic.Field(discriminator="animal")
        ]

        def get_as_union(self) -> typing.Union[_Animal.Dog, _Animal.Cat]:
            return self.root

else:

    class _AnimalBase(UniversalBaseModel):

        __root__: typing_extensions.Annotated[
            typing.Union[_Animal.Dog, _Animal.Cat], pydantic.Field(discriminator="animal")
        ]

        def get_as_union(self) -> typing.Union[_Animal.Dog, _Animal.Cat]:
            return self.__root__


class Animal(_AnimalBase):
    factory: typing.ClassVar[_Factory] = _Factory()

    def visit(
        self,
        dog: typing.Callable[[types_union_types_dog_Dog], T_Result],
        cat: typing.Callable[[types_union_types_cat_Cat], T_Result],
    ) -> T_Result:
        if self.get_as_union().animal == "dog":
            return dog(types_union_types_dog_Dog(**self.get_as_union().dict(exclude_unset=True, exclude={"animal"})))
        if self.get_as_union().animal == "cat":
            return cat(types_union_types_cat_Cat(**self.get_as_union().dict(exclude_unset=True, exclude={"animal"})))


class _Animal:
    class Dog(types_union_types_dog_Dog):
        animal: typing.Literal["dog"] = "dog"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(populate_by_name=True, frozen=True)
        else:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
                allow_population_by_field_name=True, frozen=True, smart_union=True
            )

    class Cat(types_union_types_cat_Cat):
        animal: typing.Literal["cat"] = "cat"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(populate_by_name=True, frozen=True)
        else:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
                allow_population_by_field_name=True, frozen=True, smart_union=True
            )
