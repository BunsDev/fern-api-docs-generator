# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel
from .foo import Foo as types_types_foo_Foo

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def integer(self, value: int) -> UnionWithBaseProperties:
        return UnionWithBaseProperties(_UnionWithBaseProperties.Integer(type="integer", value=value))

    def string(self, value: str) -> UnionWithBaseProperties:
        return UnionWithBaseProperties(_UnionWithBaseProperties.String(type="string", value=value))

    def foo(self, value: types_types_foo_Foo) -> UnionWithBaseProperties:
        return UnionWithBaseProperties(_UnionWithBaseProperties.Foo(**value.dict(exclude_unset=True), type="foo"))


class UnionWithBaseProperties(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _UnionWithBaseProperties.Integer, _UnionWithBaseProperties.String, _UnionWithBaseProperties.Foo
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _UnionWithBaseProperties.Integer, _UnionWithBaseProperties.String, _UnionWithBaseProperties.Foo
        ]:
            return self.root

    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _UnionWithBaseProperties.Integer, _UnionWithBaseProperties.String, _UnionWithBaseProperties.Foo
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _UnionWithBaseProperties.Integer, _UnionWithBaseProperties.String, _UnionWithBaseProperties.Foo
        ]:
            return self.__root__

    def visit(
        self,
        integer: typing.Callable[[int], T_Result],
        string: typing.Callable[[str], T_Result],
        foo: typing.Callable[[types_types_foo_Foo], T_Result],
    ) -> T_Result:
        if self.get_as_union().type == "integer":
            return integer(self.get_as_union().value)
        if self.get_as_union().type == "string":
            return string(self.get_as_union().value)
        else:
            return foo(types_types_foo_Foo(**self.get_as_union().dict(exclude_unset=True, exclude={"type"})))


class _UnionWithBaseProperties:
    class Integer(UniversalBaseModel):
        type: typing.Literal["integer"] = "integer"
        value: int

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class String(UniversalBaseModel):
        type: typing.Literal["string"] = "string"
        value: str

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True

    class Foo(types_types_foo_Foo):
        type: typing.Literal["foo"] = "foo"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True
                allow_population_by_field_name = True
