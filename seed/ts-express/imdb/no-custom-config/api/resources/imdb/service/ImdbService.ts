/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as SeedApi from "../../../index";
import express from "express";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";
import * as core from "../../../../core/index";


export interface ImdbServiceMethods {
    createMovie(
        req: express.Request<never, SeedApi.MovieId, SeedApi.CreateMovieRequest, never>,
        res: core.express.Response<SeedApi.MovieId>
    ): void | Promise<void>;
    getMovie(
        req: express.Request<
            {
                movieId: serializers.MovieId.Raw;
            },
            SeedApi.Movie,
            never,
            never
        >,
        res: core.express.Response<SeedApi.Movie>
    ): void | Promise<void>;
}

export class ImdbService {
    private router;

    constructor(private readonly methods: ImdbServiceMethods, middleware: express.RequestHandler[] = []) {
        this.router = express.Router({ mergeParams: true }).use(
            express.json({
                strict: false,
            }),
            ...middleware
        );
    }

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.post("/create-movie", async (req, res, next) => {
            const request = await serializers.CreateMovieRequest.parse(req.body);
            if (request.ok) {
                req.body = request.value;
                try {
                    let statusCode = 200;
                    const response = {
                        status: (status: number): core.express.Response<SeedApi.MovieId> => {
                            statusCode = status;
                            return response;
                        },
                        send: async (responseBody) => {
                            res
                                .status(statusCode)
                                .json(await serializers.MovieId.jsonOrThrow(responseBody, { unrecognizedObjectKeys: "strip" })
                            );
                        },
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    };
                    await this.methods.createMovie(req as any, response);
                    next();
                } catch (error) {
                    if (error instanceof errors.SeedApiError) {
                        console.warn(
                            `Endpoint 'createMovie' unexpectedly threw ${error.constructor.name}.` +
                                ` If this was intentional, please add ${error.constructor.name} to` +
                                " the endpoint's errors list in your Fern Definition."
                        );
                        await error.send(res);
                    } else {
                        res.status(500).json("Internal Server Error");
                    }
                    next(error);
                }
            } else {
                res.status(422).json({
                    errors: request.errors.map(
                        (error) => ["request", ...error.path].join(" -> ") + ": " + error.message
                    ),
                });
                next(request.errors);
            }
        });
        this.router.get("/:movieId", async (req, res, next) => {
            try {
                let statusCode = 200;
                const response = {
                    status: (status: number): core.express.Response<SeedApi.Movie> => {
                        statusCode = status;
                        return response;
                    },
                    send: async (responseBody) => {
                        res
                            .status(statusCode)
                            .json(await serializers.Movie.jsonOrThrow(responseBody, { unrecognizedObjectKeys: "strip" })
                        );
                    },
                    cookie: res.cookie.bind(res),
                    locals: res.locals,
                };
                await this.methods.getMovie(req as any, response);
                next();
            } catch (error) {
                if (error instanceof errors.SeedApiError) {
                    switch (error.errorName) {
                        case "MovieDoesNotExistError":
                            break;
                        default:
                            console.warn(
                                `Endpoint 'getMovie' unexpectedly threw ${error.constructor.name}.` +
                                    ` If this was intentional, please add ${error.constructor.name} to` +
                                    " the endpoint's errors list in your Fern Definition."
                            );
                    }
                    await error.send(res);
                } else {
                    res.status(500).json("Internal Server Error");
                }
                next(error);
            }
        });
        return this.router;
    }
}
