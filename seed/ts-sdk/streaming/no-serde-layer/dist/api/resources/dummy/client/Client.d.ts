/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as SeedStreaming from "../../../index";
export declare namespace Dummy {
    interface Options {
        environment: core.Supplier<string>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Dummy {
    protected readonly _options: Dummy.Options;
    constructor(_options: Dummy.Options);
    generateStream(request: SeedStreaming.GenerateStreamRequest, requestOptions?: Dummy.RequestOptions): Promise<core.Stream<SeedStreaming.StreamResponse>>;
    /**
     * @param {SeedStreaming.Generateequest} request
     * @param {Dummy.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.dummy.generate({
     *         numEvents: 5
     *     })
     */
    generate(request: SeedStreaming.Generateequest, requestOptions?: Dummy.RequestOptions): Promise<SeedStreaming.StreamResponse>;
}
