/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as SeedPagination from "../src/api";
import { SeedPaginationClient } from "../src/Client";

const client = new SeedPaginationClient({
    environment: process.env.TESTS_BASE_URL || "test",
    token: process.env.TESTS_AUTH || "test",
});

describe("Users", () => {
    test("listWithCursorPagination", async () => {
        const response = await client.users.listWithCursorPagination({
            page: 1,
            perPage: 1,
            order: SeedPagination.Order.Asc,
            startingAfter: "string",
        });
        expect(response).toEqual({
            page: { page: 1, next: { page: 1, startingAfter: "string" }, perPage: 1, totalPage: 1 },
            totalCount: 1,
            data: [{ name: "string", id: 1 }],
        });
    });

    test("listWithOffsetPagination", async () => {
        const response = await client.users.listWithOffsetPagination({
            page: 1,
            perPage: 1,
            order: SeedPagination.Order.Asc,
            startingAfter: "string",
        });
        expect(response).toEqual({
            page: { page: 1, next: { page: 1, startingAfter: "string" }, perPage: 1, totalPage: 1 },
            totalCount: 1,
            data: [{ name: "string", id: 1 }],
        });
    });

    test("listWithExtendedResults", async () => {
        const response = await client.users.listWithExtendedResults({
            cursor: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
        });
        expect(response).toEqual({
            totalCount: 1,
            data: { users: [{ name: "string", id: 1 }] },
            next: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
        });
    });

    test("listUsernames", async () => {
        const response = await client.users.listUsernames({
            startingAfter: "string",
        });
        expect(response).toEqual({ cursor: { after: "string", data: ["string"] } });
    });

    test("listWithGlobalConfig", async () => {
        const response = await client.users.listWithGlobalConfig({
            offset: 1,
        });
        expect(response).toEqual({ results: ["string"] });
    });
});
