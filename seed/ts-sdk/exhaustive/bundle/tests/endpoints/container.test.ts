/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { FiddleClient } from "../../src/Client";

const client = new FiddleClient({
    environment: process.env.TESTS_BASE_URL || "test",
    token: process.env.TESTS_AUTH || "test",
});

describe("Container", () => {
    test("getAndReturnListOfPrimitives", async () => {
        const response = await client.endpoints.container.getAndReturnListOfPrimitives(["string"]);
        if (response.ok) {
            expect(response.body).toEqual(["string"]);
        } else {
            fail("Response was not ok");
        }
    });

    test("getAndReturnListOfObjects", async () => {
        const response = await client.endpoints.container.getAndReturnListOfObjects([
            {
                string: "string",
            },
        ]);
        if (response.ok) {
            expect(response.body).toEqual([{ string: "string" }]);
        } else {
            fail("Response was not ok");
        }
    });

    test("getAndReturnSetOfPrimitives", async () => {
        const response = await client.endpoints.container.getAndReturnSetOfPrimitives(new Set(["string"]));
        if (response.ok) {
            expect(response.body).toEqual(new Set(["string"]));
        } else {
            fail("Response was not ok");
        }
    });

    test("getAndReturnSetOfObjects", async () => {
        const response = await client.endpoints.container.getAndReturnSetOfObjects(
            new Set([
                {
                    string: "string",
                },
            ])
        );
        if (response.ok) {
            expect(response.body).toEqual(new Set([{ string: "string" }]));
        } else {
            fail("Response was not ok");
        }
    });

    test("getAndReturnMapPrimToPrim", async () => {
        const response = await client.endpoints.container.getAndReturnMapPrimToPrim({
            string: "string",
        });
        if (response.ok) {
            expect(response.body).toEqual({ string: "string" });
        } else {
            fail("Response was not ok");
        }
    });

    test("getAndReturnMapOfPrimToObject", async () => {
        const response = await client.endpoints.container.getAndReturnMapOfPrimToObject({
            string: {
                string: "string",
            },
        });
        if (response.ok) {
            expect(response.body).toEqual({ string: { string: "string" } });
        } else {
            fail("Response was not ok");
        }
    });

    test("getAndReturnOptional", async () => {
        const response = await client.endpoints.container.getAndReturnOptional({
            string: "string",
        });
        if (response.ok) {
            expect(response.body).toEqual({ string: "string" });
        } else {
            fail("Response was not ok");
        }
    });
});
