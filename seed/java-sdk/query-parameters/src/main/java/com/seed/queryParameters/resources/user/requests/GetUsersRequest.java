/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.queryParameters.resources.user.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.queryParameters.core.ObjectMappers;
import com.seed.queryParameters.resources.user.types.NestedUser;
import com.seed.queryParameters.resources.user.types.User;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = GetUsersRequest.Builder.class)
public final class GetUsersRequest {
    private final Optional<Integer> limit;

    private final Optional<UUID> id;

    private final Optional<String> date;

    private final Optional<OffsetDateTime> deadline;

    private final Optional<byte[]> bytes;

    private final Optional<User> user;

    private final Optional<Map<String, String>> keyValue;

    private final Optional<String> optionalString;

    private final Optional<NestedUser> nestedUser;

    private final Optional<User> optionalUser;

    private final Optional<User> excludeUser;

    private final Optional<String> filter;

    private final Map<String, Object> additionalProperties;

    private GetUsersRequest(
            Optional<Integer> limit,
            Optional<UUID> id,
            Optional<String> date,
            Optional<OffsetDateTime> deadline,
            Optional<byte[]> bytes,
            Optional<User> user,
            Optional<Map<String, String>> keyValue,
            Optional<String> optionalString,
            Optional<NestedUser> nestedUser,
            Optional<User> optionalUser,
            Optional<User> excludeUser,
            Optional<String> filter,
            Map<String, Object> additionalProperties) {
        this.limit = limit;
        this.id = id;
        this.date = date;
        this.deadline = deadline;
        this.bytes = bytes;
        this.user = user;
        this.keyValue = keyValue;
        this.optionalString = optionalString;
        this.nestedUser = nestedUser;
        this.optionalUser = optionalUser;
        this.excludeUser = excludeUser;
        this.filter = filter;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    @JsonProperty("id")
    public Optional<UUID> getId() {
        return id;
    }

    @JsonProperty("date")
    public Optional<String> getDate() {
        return date;
    }

    @JsonProperty("deadline")
    public Optional<OffsetDateTime> getDeadline() {
        return deadline;
    }

    @JsonProperty("bytes")
    public Optional<byte[]> getBytes() {
        return bytes;
    }

    @JsonProperty("user")
    public Optional<User> getUser() {
        return user;
    }

    @JsonProperty("keyValue")
    public Optional<Map<String, String>> getKeyValue() {
        return keyValue;
    }

    @JsonProperty("optionalString")
    public Optional<String> getOptionalString() {
        return optionalString;
    }

    @JsonProperty("nestedUser")
    public Optional<NestedUser> getNestedUser() {
        return nestedUser;
    }

    @JsonProperty("optionalUser")
    public Optional<User> getOptionalUser() {
        return optionalUser;
    }

    @JsonProperty("excludeUser")
    public Optional<User> getExcludeUser() {
        return excludeUser;
    }

    @JsonProperty("filter")
    public Optional<String> getFilter() {
        return filter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetUsersRequest && equalTo((GetUsersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetUsersRequest other) {
        return limit.equals(other.limit)
                && id.equals(other.id)
                && date.equals(other.date)
                && deadline.equals(other.deadline)
                && bytes.equals(other.bytes)
                && user.equals(other.user)
                && keyValue.equals(other.keyValue)
                && optionalString.equals(other.optionalString)
                && nestedUser.equals(other.nestedUser)
                && optionalUser.equals(other.optionalUser)
                && excludeUser.equals(other.excludeUser)
                && filter.equals(other.filter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.limit,
                this.id,
                this.date,
                this.deadline,
                this.bytes,
                this.user,
                this.keyValue,
                this.optionalString,
                this.nestedUser,
                this.optionalUser,
                this.excludeUser,
                this.filter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> limit = Optional.empty();

        private Optional<UUID> id = Optional.empty();

        private Optional<String> date = Optional.empty();

        private Optional<OffsetDateTime> deadline = Optional.empty();

        private Optional<byte[]> bytes = Optional.empty();

        private Optional<User> user = Optional.empty();

        private Optional<Map<String, String>> keyValue = Optional.empty();

        private Optional<String> optionalString = Optional.empty();

        private Optional<NestedUser> nestedUser = Optional.empty();

        private Optional<User> optionalUser = Optional.empty();

        private Optional<User> excludeUser = Optional.empty();

        private Optional<String> filter = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetUsersRequest other) {
            limit(other.getLimit());
            id(other.getId());
            date(other.getDate());
            deadline(other.getDeadline());
            bytes(other.getBytes());
            user(other.getUser());
            keyValue(other.getKeyValue());
            optionalString(other.getOptionalString());
            nestedUser(other.getNestedUser());
            optionalUser(other.getOptionalUser());
            excludeUser(other.getExcludeUser());
            filter(other.getFilter());
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.of(limit);
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<UUID> id) {
            this.id = id;
            return this;
        }

        public Builder id(UUID id) {
            this.id = Optional.of(id);
            return this;
        }

        @JsonSetter(value = "date", nulls = Nulls.SKIP)
        public Builder date(Optional<String> date) {
            this.date = date;
            return this;
        }

        public Builder date(String date) {
            this.date = Optional.of(date);
            return this;
        }

        @JsonSetter(value = "deadline", nulls = Nulls.SKIP)
        public Builder deadline(Optional<OffsetDateTime> deadline) {
            this.deadline = deadline;
            return this;
        }

        public Builder deadline(OffsetDateTime deadline) {
            this.deadline = Optional.of(deadline);
            return this;
        }

        @JsonSetter(value = "bytes", nulls = Nulls.SKIP)
        public Builder bytes(Optional<byte[]> bytes) {
            this.bytes = bytes;
            return this;
        }

        public Builder bytes(byte[] bytes) {
            this.bytes = Optional.of(bytes);
            return this;
        }

        @JsonSetter(value = "user", nulls = Nulls.SKIP)
        public Builder user(Optional<User> user) {
            this.user = user;
            return this;
        }

        public Builder user(User user) {
            this.user = Optional.of(user);
            return this;
        }

        @JsonSetter(value = "keyValue", nulls = Nulls.SKIP)
        public Builder keyValue(Optional<Map<String, String>> keyValue) {
            this.keyValue = keyValue;
            return this;
        }

        public Builder keyValue(Map<String, String> keyValue) {
            this.keyValue = Optional.of(keyValue);
            return this;
        }

        @JsonSetter(value = "optionalString", nulls = Nulls.SKIP)
        public Builder optionalString(Optional<String> optionalString) {
            this.optionalString = optionalString;
            return this;
        }

        public Builder optionalString(String optionalString) {
            this.optionalString = Optional.of(optionalString);
            return this;
        }

        @JsonSetter(value = "nestedUser", nulls = Nulls.SKIP)
        public Builder nestedUser(Optional<NestedUser> nestedUser) {
            this.nestedUser = nestedUser;
            return this;
        }

        public Builder nestedUser(NestedUser nestedUser) {
            this.nestedUser = Optional.of(nestedUser);
            return this;
        }

        @JsonSetter(value = "optionalUser", nulls = Nulls.SKIP)
        public Builder optionalUser(Optional<User> optionalUser) {
            this.optionalUser = optionalUser;
            return this;
        }

        public Builder optionalUser(User optionalUser) {
            this.optionalUser = Optional.of(optionalUser);
            return this;
        }

        @JsonSetter(value = "excludeUser", nulls = Nulls.SKIP)
        public Builder excludeUser(Optional<User> excludeUser) {
            this.excludeUser = excludeUser;
            return this;
        }

        public Builder excludeUser(User excludeUser) {
            this.excludeUser = Optional.of(excludeUser);
            return this;
        }

        @JsonSetter(value = "filter", nulls = Nulls.SKIP)
        public Builder filter(Optional<String> filter) {
            this.filter = filter;
            return this;
        }

        public Builder filter(String filter) {
            this.filter = Optional.of(filter);
            return this;
        }

        public GetUsersRequest build() {
            return new GetUsersRequest(
                    limit,
                    id,
                    date,
                    deadline,
                    bytes,
                    user,
                    keyValue,
                    optionalString,
                    nestedUser,
                    optionalUser,
                    excludeUser,
                    filter,
                    additionalProperties);
        }
    }
}
