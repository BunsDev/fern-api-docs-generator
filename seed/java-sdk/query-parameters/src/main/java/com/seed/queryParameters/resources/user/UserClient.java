/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.queryParameters.resources.user;

import com.seed.queryParameters.core.ClientOptions;
import com.seed.queryParameters.core.ObjectMappers;
import com.seed.queryParameters.core.RequestOptions;
import com.seed.queryParameters.core.SeedQueryParametersApiError;
import com.seed.queryParameters.core.SeedQueryParametersError;
import com.seed.queryParameters.resources.user.requests.GetUsersRequest;
import com.seed.queryParameters.resources.user.types.User;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class UserClient {
    protected final ClientOptions clientOptions;

    public UserClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public User getUsername() {
        return getUsername(GetUsersRequest.builder().build());
    }

    public User getUsername(GetUsersRequest request) {
        return getUsername(request, null);
    }

    public User getUsername(GetUsersRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user");
        if (request.getLimit().isPresent()) {
            httpUrl.addQueryParameter("limit", request.getLimit().get().toString());
        }
        if (request.getId().isPresent()) {
            httpUrl.addQueryParameter("id", request.getId().get().toString());
        }
        if (request.getDate().isPresent()) {
            httpUrl.addQueryParameter("date", request.getDate().get());
        }
        if (request.getDeadline().isPresent()) {
            httpUrl.addQueryParameter("deadline", request.getDeadline().get().toString());
        }
        if (request.getBytes().isPresent()) {
            httpUrl.addQueryParameter("bytes", request.getBytes().get().toString());
        }
        if (request.getUser().isPresent()) {
            httpUrl.addQueryParameter("user", request.getUser().get().toString());
        }
        if (request.getKeyValue().isPresent()) {
            httpUrl.addQueryParameter("keyValue", request.getKeyValue().get().toString());
        }
        if (request.getOptionalString().isPresent()) {
            httpUrl.addQueryParameter(
                    "optionalString", request.getOptionalString().get());
        }
        if (request.getNestedUser().isPresent()) {
            httpUrl.addQueryParameter(
                    "nestedUser", request.getNestedUser().get().toString());
        }
        if (request.getOptionalUser().isPresent()) {
            httpUrl.addQueryParameter(
                    "optionalUser", request.getOptionalUser().get().toString());
        }
        if (request.getExcludeUser().isPresent()) {
            httpUrl.addQueryParameter(
                    "excludeUser", request.getExcludeUser().get().toString());
        }
        if (request.getFilter().isPresent()) {
            httpUrl.addQueryParameter("filter", request.getFilter().get());
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), User.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedQueryParametersApiError(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SeedQueryParametersError("Network error executing HTTP request", e);
        }
    }
}
