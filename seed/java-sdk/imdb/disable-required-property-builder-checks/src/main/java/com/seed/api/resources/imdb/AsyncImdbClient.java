/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.resources.imdb;

import com.seed.api.core.ClientOptions;
import com.seed.api.core.RequestOptions;
import com.seed.api.core.SeedApiHttpResponse;
import com.seed.api.core.Suppliers;
import com.seed.api.resources.imdb.http.AsyncImdbHttpClient;
import com.seed.api.resources.imdb.types.CreateMovieRequest;
import com.seed.api.resources.imdb.types.Movie;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncImdbClient {
    protected final ClientOptions clientOptions;

    protected final Supplier<AsyncImdbHttpClient> httpClient;

    public AsyncImdbClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.httpClient = Suppliers.memoize(() -> new AsyncImdbHttpClient(clientOptions));
    }

    /**
     * Get responses that include the raw OkHttp response object
     */
    public AsyncImdbHttpClient withRawResponses() {
        return httpClient.get();
    }

    /**
     * Add a movie to the database using the movies/* /... path.
     */
    public CompletableFuture<String> createMovie(CreateMovieRequest request) {
        return createMovie(request, null);
    }

    /**
     * Add a movie to the database using the movies/* /... path.
     */
    public CompletableFuture<String> createMovie(CreateMovieRequest request, RequestOptions requestOptions) {
        return httpClient.get().createMovie(request, requestOptions).thenApply(SeedApiHttpResponse::value);
    }

    public CompletableFuture<Movie> getMovie(String movieId) {
        return getMovie(movieId, null);
    }

    public CompletableFuture<Movie> getMovie(String movieId, RequestOptions requestOptions) {
        return httpClient.get().getMovie(movieId, requestOptions).thenApply(SeedApiHttpResponse::value);
    }
}
