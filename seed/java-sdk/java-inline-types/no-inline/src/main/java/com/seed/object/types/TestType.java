/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.object.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.object.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TestType.Builder.class)
public final class TestType {
    private final RootType2 testProperty;

    private final Map<String, Object> additionalProperties;

    private TestType(RootType2 testProperty, Map<String, Object> additionalProperties) {
        this.testProperty = testProperty;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("testProperty")
    public RootType2 getTestProperty() {
        return testProperty;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TestType && equalTo((TestType) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TestType other) {
        return testProperty.equals(other.testProperty);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.testProperty);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TestPropertyStage builder() {
        return new Builder();
    }

    public interface TestPropertyStage {
        _FinalStage testProperty(@NotNull RootType2 testProperty);

        Builder from(TestType other);
    }

    public interface _FinalStage {
        TestType build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TestPropertyStage, _FinalStage {
        private RootType2 testProperty;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TestType other) {
            testProperty(other.getTestProperty());
            return this;
        }

        @java.lang.Override
        @JsonSetter("testProperty")
        public _FinalStage testProperty(@NotNull RootType2 testProperty) {
            this.testProperty = Objects.requireNonNull(testProperty, "testProperty must not be null");
            return this;
        }

        @java.lang.Override
        public TestType build() {
            return new TestType(testProperty, additionalProperties);
        }
    }
}
