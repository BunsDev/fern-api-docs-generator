/* eslint-disable @typescript-eslint/no-extraneous-class */
// Swift Imports
import { AccessLevel } from "./ast/AccessLevel";
import { Enum } from "./ast/Enum";
import { EnumCase } from "./ast/EnumCase";
import { Field } from "./ast/Field";
import { File } from "./ast/File";
import { FileHeader } from "./ast/FileHeader";
import { Func } from "./ast/Func";
import { Import } from "./ast/Import";
import { Param } from "./ast/Param";
import { Primative } from "./ast/Primative";
import { Struct } from "./ast/Struct";
import { Type } from "./ast/Type";
import { TypeAlias } from "./ast/TypeAlias";

// Swift Exports
export { AccessLevel } from "./ast/AccessLevel";
export { ClassLevel } from "./ast/ClassLevel";
export { Enum } from "./ast/Enum";
export { EnumCase } from "./ast/EnumCase";
export { Field } from "./ast/Field";
export { File } from "./ast/File";
export { FileHeader } from "./ast/FileHeader";
export { Func } from "./ast/Func";
export { FunctionModifier } from "./ast/FunctionModifier";
export { Import } from "./ast/Import";
export { Param } from "./ast/Param";
export { Primative } from "./ast/Primative";
export type { PrimativeKey } from "./ast/Primative";
export { Struct } from "./ast/Struct";
export { Type } from "./ast/Type";
export { VariableType } from "./ast/VariableType";
export { SwiftFile } from "./project/SwiftFile";

export default class Swift {

  /**
   * üîß Config
   */

  static indentSize = 4;

  /**
   * üß± Core Nodes
   */

  public static makeFileHeader(args: FileHeader.Args): FileHeader {
    return new FileHeader(args);
  }

  public static makeTypeAlias(args: TypeAlias.Args): TypeAlias {
    return new TypeAlias(args);
  }
  
  public static makeImport(args: Import.Args): Import {
    return new Import(args);
  }

  public static makeField(args: Field.Args): Field {
    return new Field(args);
  }
  
  public static makeParam(args: Param.Args): Param {
    return new Param(args);
  }

  public static makeEnumCase(args: EnumCase.Args): EnumCase {
    return new EnumCase(args);
  }

  public static makeEnum(args: Enum.Args): Enum {
    return new Enum(args);
  }
  
  public static makeFunc(args: Func.Args): Func {
    return new Func(args);
  }

  public static makePrimative(args: Primative.Args): Primative {
    return new Primative(args);
  }

  public static makeStruct(args: Struct.Args): Struct {
    return new Struct(args);
  }

  public static makeType(args: Type.Args): Type {
    return new Type(args);
  }
  
  public static makeFile(args: File.Args): File {
    return new File(args);
  }

  /**
   * üè≠ Factories
   * 
   * Usage Example:
   * Swift.factories.imports.makeFoundation();
   * 
   */

  public static factories = {

    fileHeaders: {

      makeHeaderWithFernStub(filename: string): FileHeader {
        return Swift.makeFileHeader({
          header: `
//
//  ${filename}.swift
//
//
//  This file was auto-generated by Fern
//
        `.trim()
        });
      }

    },

    primatives: {

      /**
       * @returns String
       */
      makeString(): Primative {
        return Swift.makePrimative({ 
          key: "string" 
        });
      }

    },

    imports: {

      /**
       * @returns import Foundation
       */
      makeFoundation(): Import {
        return Swift.makeImport({
          packageName: "Foundation",
        });
      }

    },

    types: {

      /**
       * @returns class Codable { ... }
       */
      makeCodable(): Type {
        return Swift.makeType({
          name: "Codable"
        });
      },

    },

    enums: {

      /** Used for JSON Deserialization
       * 
       * @returns
       * enum CodingKeys: String, CodingKey {
       *   case pageNumber = "page_number"
       *   case pageSize = "page_size"
       *   case configsPage = "configs_page"
       * }
       * 
       */
      makeCodingKeys(properties: any[]): Enum {
        return Swift.makeEnum({
          name: "CodingKeys",
          inheritance: [
            Swift.factories.primatives.makeString(),
            Swift.makeType({ name: "CodingKey" })
          ],
          enumCases: [
            Swift.makeEnumCase({ name: "TEST", key: "TEST" })
          ]
        });
      }

    },

    structs: {

      /**
       * @returns 
       * import Foundation
       * 
       * public struct ReturnPagedConfigs: Codable {
       * 
       *   enum CodingKeys: String, CodingKey {
       *     case pageNumber = "page_number"
       *   }
       * 
       *   let pageNumber: Int?
       * 
       * }
       */
      makeCodableStruct(safeName: string, fields: Field[]): File {
        
        return Swift.makeFile({
          fileHeader: Swift.factories.fileHeaders.makeHeaderWithFernStub(safeName),
          imports: [
            Swift.factories.imports.makeFoundation()
          ],
          node: Swift.makeStruct({
            accessLevel: AccessLevel.Public,
            name: safeName,
            inheritance: [
              Swift.factories.types.makeCodable()
            ],
            subclasses: [
              Swift.factories.enums.makeCodingKeys(fields),
            ],
            fields,
          })
        });
      }

    }

  };

}