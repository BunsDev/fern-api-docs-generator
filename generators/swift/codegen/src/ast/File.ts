import { Class } from "./Class";
import { AstNode } from "./core/AstNode";
import { Writer } from "./core/Writer";
import { Import } from "./Import";

export declare namespace File {
    interface Args {
        boilerplate?: string;
        imports?: Import[];
        class: Class;
    }
}

export class File extends AstNode {

    public readonly boilerplate?: string;
    public readonly imports: Import[];
    public readonly class: Class;

    constructor({ 
        boilerplate = undefined, 
        imports = [], 
        class: classInstance,
    }: File.Args) {
        super();
        this.boilerplate = boilerplate;
        this.imports = imports;
        this.class = classInstance;
    }

    public write(writer: Writer): void {

        // // Adds the boilerplate comment to the top of the file
        // if (!this.boilerplate) {
        //     writer.write(`
        //     //
        //     //  ${this.name}.swift
        //     //
        //     //
        //     //  This file is auto-generated by Fern.
        //     //  More info at: https://buildwithfern.com
        //     //
        //     `);
        // } else {
        //     writer.write(this.boilerplate);
        // }

        // // e.g. import PackageName
        // this.imports.forEach(imp => {
        //     writer.write(`import ${imp}`);
        // });

        // // e.g. open class ClassName {
        // writer.write(`${this.accessLevel} class ${this.name} {`);

        // writer.write("}");

    }
}
