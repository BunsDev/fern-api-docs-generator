/* eslint-disable object-shorthand */
/* eslint-disable @typescript-eslint/no-extraneous-class */
/* eslint-disable no-console */
import Swift, { AccessLevel, SwiftFile, VariableType } from "@fern-api/swift-codegen";
import { ObjectTypeDeclaration, TypeDeclaration } from "@fern-fern/ir-sdk/api";
import { ModelGeneratorContext } from "./ModelGeneratorCli";

export default class SwiftObjectGenerator {

  private readonly context: ModelGeneratorContext;
  private readonly typeDeclaration: TypeDeclaration;
  private readonly objectDeclaration: ObjectTypeDeclaration;

  constructor(
    context: ModelGeneratorContext,
    typeDeclaration: TypeDeclaration,
    objectDeclaration: ObjectTypeDeclaration
  ) {
    this.context = context;
    this.typeDeclaration = typeDeclaration;
    this.objectDeclaration = objectDeclaration;
  }

  public generate(): SwiftFile {

    console.log("generateModel otd");
    console.log(JSON.stringify(this.typeDeclaration, null, 2));

    const name = this.typeDeclaration.name.name.pascalCase.safeName;

    const fields = this.objectDeclaration.properties.map(property => {

      const valueType = property.valueType._visit<string>({
        container: (value) => "ERROR",
        named: (value) => value.name.pascalCase.safeName,
        primitive: (valueType) => valueType.v2?.type ?? "ERROR",
        unknown: () => "Any",
        _other: (value: { type: string; }) => "ERROR",
      });
      
      // example: let name: String
      return Swift.makeField({
        accessLevel: AccessLevel.Public,
        variableType: VariableType.Let,
        name: property.name.name.camelCase.safeName,
        valueType: valueType
      });

    });

    const output = Swift.makeFile({
      fileHeader: Swift.makeFileHeader({
        header: `
//
//  ${name}.swift
//
//
//  This file was auto-generated by Fern
//
        `.trim()
      }),
      imports: [
        Swift.makeImport({ packageName: "Foundation" }),
      ],
      class: Swift.makeStruct({
        accessLevel: AccessLevel.Public,
        name: name,
        fields: fields,
      })
    });

    return new SwiftFile({
      name: name,
      file: output,
      directory: this.context.config.output.path,
    });

  }

}