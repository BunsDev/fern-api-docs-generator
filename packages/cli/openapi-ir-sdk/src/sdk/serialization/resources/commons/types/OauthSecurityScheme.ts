/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";
import { OAuthClientCredentials } from "./OAuthClientCredentials";
import { FallbackOAuthScheme } from "./FallbackOAuthScheme";

export const OauthSecurityScheme: core.serialization.Schema<
    serializers.OauthSecurityScheme.Raw,
    FernOpenapiIr.OauthSecurityScheme
> = core.serialization
    .union("type", {
        clientCredentials: OAuthClientCredentials,
        unrecognized: FallbackOAuthScheme,
    })
    .transform<FernOpenapiIr.OauthSecurityScheme>({
        transform: (value) => {
            switch (value.type) {
                case "clientCredentials":
                    return FernOpenapiIr.OauthSecurityScheme.clientCredentials(value);
                case "unrecognized":
                    return FernOpenapiIr.OauthSecurityScheme.unrecognized(value);
                default:
                    return value as FernOpenapiIr.OauthSecurityScheme;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace OauthSecurityScheme {
    type Raw = OauthSecurityScheme.ClientCredentials | OauthSecurityScheme.Unrecognized;

    interface ClientCredentials extends OAuthClientCredentials.Raw {
        type: "clientCredentials";
    }

    interface Unrecognized extends FallbackOAuthScheme.Raw {
        type: "unrecognized";
    }
}
