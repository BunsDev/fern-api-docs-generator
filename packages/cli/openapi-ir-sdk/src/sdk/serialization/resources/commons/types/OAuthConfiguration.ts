/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernOpenapiIr from "../../../../api";
import * as core from "../../../../core";

export const OAuthConfiguration: core.serialization.Schema<
    serializers.OAuthConfiguration.Raw,
    FernOpenapiIr.OAuthConfiguration
> = core.serialization
    .union("type", {
        authorizationCode: core.serialization.lazyObject(
            async () => (await import("../../..")).AuthorizationCodeOAuthScheme
        ),
        clientCredentials: core.serialization.lazyObject(
            async () => (await import("../../..")).ClientCredentialsOAuthScheme
        ),
    })
    .transform<FernOpenapiIr.OAuthConfiguration>({
        transform: (value) => {
            switch (value.type) {
                case "authorizationCode":
                    return FernOpenapiIr.OAuthConfiguration.authorizationCode(value);
                case "clientCredentials":
                    return FernOpenapiIr.OAuthConfiguration.clientCredentials(value);
                default:
                    return value as FernOpenapiIr.OAuthConfiguration;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace OAuthConfiguration {
    type Raw = OAuthConfiguration.AuthorizationCode | OAuthConfiguration.ClientCredentials;

    interface AuthorizationCode extends serializers.AuthorizationCodeOAuthScheme.Raw {
        type: "authorizationCode";
    }

    interface ClientCredentials extends serializers.ClientCredentialsOAuthScheme.Raw {
        type: "clientCredentials";
    }
}
