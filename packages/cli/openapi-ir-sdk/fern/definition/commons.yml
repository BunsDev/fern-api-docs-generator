imports:
  finalIr: finalIr.yml

types:
  WithDescription:
    properties:
      description: optional<string>

  WithName:
    properties:
      nameOverride:
        type: optional<string>
        docs: Read from `x-fern-type-name`.
      generatedName:
        type: string
        docs: |
          An autogenerated name for a type based on the hierarchy
          of the type declarations.
          [MyType -> propA -> propB] will turn into MyTypePropAPropB
          [MyType] will turn into MyType

  SchemaId:
    type: string
    docs: The name of the schema.

  TagId:
    type: string
    docs: The name of the tag.

  Tag:
    extends: WithDescription
    properties:
      id: TagId

  SecuritySchemeId:
    type: string
    docs: The name of the security scheme.

  SecurityScheme:
    union:
      basic: BasicSecurityScheme
      bearer: BearerSecurityScheme
      header: HeaderSecurityScheme
      query:
        type: QuerySecurityScheme
        docs: parameter sent as a security scheme
      oauth:
        type: OauthSecurityScheme

  BearerSecurityScheme:
    properties:
      tokenVariableName: optional<string>
      tokenEnvVar: optional<string>

  BasicSecurityScheme:
    properties:
      usernameVariableName: optional<string>
      usernameEnvVar: optional<string>
      passwordVariableName: optional<string>
      passwordEnvVar: optional<string>

  HeaderSecurityScheme:
    properties:
      headerName: string
      prefix: optional<string>
      headerVariableName: optional<string>
      headerEnvVar: optional<string>

  QuerySecurityScheme:
    properties:
      queryParameterName: string

  OauthSecurityScheme:
    docs: Note that for the oauth scheme we are currently assuming the resultant token is leveraged as a bearer token, e.g. "Authorization Bearer
    properties:
      scopesEnum: optional<finalIr.EnumSchema>
      configuration: optional<OAuthConfiguration>
  BaseOauthSecurityScheme:
    properties:
      defaultScopes: optional<list<string>>
      tokenPrefix: optional<string>
      clientIdEnvVar: optional<string>
      clientSecretEnvVar: optional<string>
      redirectUri: optional<string>
  EndpointReference:
    properties:
      path: string
      method: string
  OAuthConfiguration:
    union:
      authorizationCode: AuthorizationCodeOAuthScheme
      clientCredentials: ClientCredentialsOAuthScheme
  OAuthAccessTokenFields:
    properties:
      accessToken: string
      expiresIn: optional<string>
      refreshToken: optional<string>
  OAuthTokenEndpoint:
    properties:
      endpointReference: EndpointReference
      responseFields: OAuthAccessTokenFields
  OAuthRefreshTokenFields:
    properties:
      refreshToken: string
  OAuthRefreshTokenEndpoint:
    properties:
      endpointReference: EndpointReference
      requestFields: OAuthRefreshTokenFields
      responseFields: OAuthAccessTokenFields
  OAuthAuthorizationEndpoint:
    properties:
      path: string
      # To avoid complexity, let's just enforce that these params are strings
      # so here we're just taking in the parameters' names
      parameters: list<string>
  AuthorizationCodeOAuthScheme:
    extends: BaseOauthSecurityScheme
    properties:
      authorizationCodeEnvVar: optional<string>
      tokenEndpoint: OAuthTokenEndpoint
      authorizationEndpoint: OAuthAuthorizationEndpoint
      refreshEndpoint: optional<OAuthRefreshTokenEndpoint>
  ClientCredentialsOAuthScheme:
    extends: BaseOauthSecurityScheme
    properties:
      tokenEndpoint: OAuthTokenEndpoint
      refreshEndpoint: optional<OAuthRefreshTokenEndpoint>

  StatusCode:
    type: integer

  Server:
    extends: WithDescription
    properties:
      name:
        type: optional<string>
        docs: Populated by `X-Server-Name`
      url: string

  SdkGroupName:
    type: list<string>
    docs: This is populated by `x-fern-sdk-method-name`

  WithSdkGroupName:
    properties:
      groupName: optional<SdkGroupName>
