imports:
  finalIr: finalIr.yml

types:
  WithSource:
    properties:
      source: optional<Source>

  WithDescription:
    properties:
      description: optional<string>

  WithAvailability:
    properties:
      availability: optional<finalIr.Availability>

  WithName:
    properties:
      nameOverride:
        type: optional<string>
        docs: Read from `x-fern-type-name`.
      generatedName:
        type: string
        docs: |
          An autogenerated name for a type based on the hierarchy
          of the type declarations.
          [MyType -> propA -> propB] will turn into MyTypePropAPropB
          [MyType] will turn into MyType

  Source:
    union:
      openapi: OpenAPISource
      protobuf: ProtobufSource

  OpenAPISource:
    properties:
      file: string
  
  ProtobufSource:
    properties:
      file: string

  SchemaId:
    type: string
    docs: The name of the schema.

  TagId:
    type: string
    docs: The name of the tag.

  Tag:
    extends: WithDescription
    properties:
      id: TagId

  SecuritySchemeId:
    type: string
    docs: The name of the security scheme.

  SecurityScheme:
    union:
      basic: BasicSecurityScheme
      bearer: BearerSecurityScheme
      header: HeaderSecurityScheme
      query:
        type: QuerySecurityScheme
        docs: parameter sent as a security scheme
      oauth:
        type: OauthSecurityScheme

  BearerSecurityScheme:
    properties:
      tokenVariableName: optional<string>
      tokenEnvVar: optional<string>

  BasicSecurityScheme:
    properties:
      usernameVariableName: optional<string>
      usernameEnvVar: optional<string>
      passwordVariableName: optional<string>
      passwordEnvVar: optional<string>

  HeaderSecurityScheme:
    properties:
      headerName: string
      prefix: optional<string>
      headerVariableName: optional<string>
      headerEnvVar: optional<string>

  QuerySecurityScheme:
    properties:
      queryParameterName: string

  # Effectively pulled from the IR, since it matches the extension schema so closely
  OauthSecurityScheme:
    docs: | 
      Note that this config is expected to be "unresolved", for example, the OAS extension takes in an endpoint as `GET https://example.com/token`
      whereas within the openapi-ir-to-fern package, we expect to consume and resolve this to a package path in the fern definition.
    union:
      clientCredentials: OAuthClientCredentials
      unrecognized: FallbackOAuthScheme

  FallbackOAuthScheme:
    properties:
      scopesEnum: optional<finalIr.EnumSchema>

  OAuthClientCredentials:
    properties:
      clientIdEnvVar: optional<string>
      clientSecretEnvVar: optional<string>
      tokenPrefix: optional<string>
      scopes: optional<list<string>>
      tokenEndpoint: OAuthTokenEndpoint
      refreshEndpoint: optional<OAuthRefreshEndpoint>
  OAuthTokenEndpoint:
    properties:
      endpointReference: string
      requestProperties: OAuthAccessTokenRequestProperties
      responseProperties: OAuthAccessTokenResponseProperties
  OAuthRefreshEndpoint:
    properties:
      endpointReference: string
      requestProperties: OAuthRefreshTokenRequestProperties
      responseProperties: OAuthAccessTokenResponseProperties
  OAuthAccessTokenRequestProperties:
    properties:
      clientId: string
      clientSecret: string
      scopes: optional<string>
  OAuthAccessTokenResponseProperties:
    properties:
      accessToken: string
      expiresIn: optional<string>
      refreshToken: optional<string>
  OAuthRefreshTokenRequestProperties:
    properties:
      refreshToken: string

  StatusCode:
    type: integer

  Server:
    extends: WithDescription
    properties:
      name:
        type: optional<string>
        docs: Populated by `X-Server-Name`
      url: string

  SdkGroupName:
    type: list<string>
    docs: This is populated by `x-fern-sdk-method-name`

  WithSdkGroupName:
    properties:
      groupName: optional<SdkGroupName>
