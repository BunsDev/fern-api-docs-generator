import { faker } from '@faker-js/faker';
import { assertNever } from "@fern-api/core-utils";
import {
    AliasTypeDeclaration,
    ContainerType,
    DeclaredTypeName,
    EnumTypeDeclaration,
    ExampleContainer,
    ExamplePrimitive, ExampleSingleUnionType, ExampleSingleUnionTypeProperties, ExampleType,
    ExampleTypeReference,
    ExampleTypeReferenceShape,
    ExampleTypeShape,
    IntermediateRepresentation,
    Literal,
    MapType,
    ObjectTypeDeclaration,
    PrimitiveType, SingleUnionType, TypeDeclaration, TypeReference,
    UndiscriminatedUnionTypeDeclaration,
    UnionTypeDeclaration
} from "@fern-api/ir-sdk";


export class ExampleGenerator {
    private ir: IntermediateRepresentation;

    constructor(
        ir: IntermediateRepresentation,
    ) {
        this.ir = ir;

        // TODO: We want to go in here and autogenerate the examples only if there is not
        // already an autogenerated example in the IR. Since the data is randomized, we'd
        // be making loads of unnecessary changes every time otherwise.
    }

    public generateExampleType(typeDeclaration: TypeDeclaration): ExampleType | null {
        switch (typeDeclaration.shape.type) {
            case "alias":
                return this.generateExampleTypeForAlias(typeDeclaration.shape);
            case "enum":
                return this.generateExampleTypeForEnum(typeDeclaration.shape);
            case "object":
                return this.generateExampleTypeForObject(typeDeclaration.shape);
            case "union":
                return this.generateExampleTypeForUnion(typeDeclaration.shape);
            case "undiscriminatedUnion":
                return this.generateExampleTypeForUndiscriminatedUnion(typeDeclaration.shape);
            default:
                assertNever(typeDeclaration.shape);
        }
    }

    private generateExampleTypeForAlias(aliasDeclaration: AliasTypeDeclaration): ExampleType | null {
        const exampleTypeReference = this.generateExampleTypeReference(aliasDeclaration.aliasOf);
        return this.newNamelessExampleType({
            jsonExample: exampleTypeReference.jsonExample,
            shape: ExampleTypeShape.alias({
                value: exampleTypeReference
            })
        });
    }

    private generateExampleTypeForEnum(enumDeclaration: EnumTypeDeclaration): ExampleType | null {
        if (enumDeclaration.values.length === 0 || enumDeclaration.values[0] == null) {
            return null;
        }
        const exampleEnumValue = enumDeclaration.values[0];
        return this.newNamelessExampleType({
            jsonExample: exampleEnumValue.name.wireValue,
            shape: ExampleTypeShape.enum({
                value: exampleEnumValue.name
            })
        });
    }

    private generateExampleTypeForObject(objectDeclaration: ObjectTypeDeclaration): ExampleType | null {
        // return this.newNamelessExampleType({
        //     jsonExample: ,
        //     shape: ExampleTypeShape.object({

        //     })
        // });
        return null
    }

    private generateSingleUionType(type: SingleUnionType): ExampleSingleUnionType {
        return {
            wireDiscriminantValue: type.discriminantValue,
            shape: type.shape._visit<ExampleSingleUnionTypeProperties>({
                samePropertiesAsObject: (value) => {},
                singleProperty: (value) => {},
                noProperties: () => {},
                _other: (value: any) => {},
            })
        }
    }

    private generateExampleTypeForUnion(unionDeclaration: UnionTypeDeclaration): ExampleType[] | null {
        return unionDeclaration.types.map((member) => {
            return this.newNamelessExampleType({
                jsonExample: ,
                shape: ExampleTypeShape.union({
                    discriminant: unionDeclaration.discriminant,
                    singleUnionType: this.generateSingleUionType(member)
                })
            })
        });
    }

    private generateExampleTypeForUndiscriminatedUnion(
        undiscriminatedUnionDeclaration: UndiscriminatedUnionTypeDeclaration
    ): ExampleType[] | null {
        return undiscriminatedUnionDeclaration.members.map((member, index) => {
            return this.newNamelessExampleType({
                jsonExample: ,
                shape: ExampleTypeShape.undiscriminatedUnion({
                    index,
                    singleUnionType: this.generateExampleTypeReference(member.type)
                })
            })
        });
    }

    private generateExampleTypeReference(typeReference: TypeReference): ExampleTypeReference {
        switch (typeReference.type) {
            case "container":
                return this.generateExampleContainer(typeReference.container);
            case "named":
                return this.generateExampleNamed(typeReference);
            case "primitive":
                return this.generateExamplePrimitive(typeReference.primitive);
            case "unknown":
                return this.generateExampleUnknown();
            default:
                assertNever(typeReference);
        }
    }

    // TODO: shouldn't this be the same as generateExampleTypeForObject
    private generateExampleNamed(name: DeclaredTypeName): ExampleTypeReference {
        const typeDeclaration = this.resolveType(name);
        const exampleType = this.generateExampleType(typeDeclaration);
        if (exampleType == null) {
            throw new Error(`internal error: failed to generate example type with id: ${name.typeId}`);
        }
        return {
            jsonExample: exampleType.jsonExample,
            shape: ExampleTypeReferenceShape.named({
                typeName: name,
                shape: exampleType.shape
            })
        };
    }

    private generateExampleContainer(containerType: ContainerType): ExampleTypeReference {
        switch (containerType.type) {
            case "list":
                return this.generateExampleTypeReferenceList(containerType.list);
            case "map":
                return this.generateExampleTypeReferenceMap(containerType);
            case "optional":
                return this.generateExampleTypeReference(containerType.optional);
            case "set":
                return this.generateExampleTypeReferenceSet(containerType.set);
            case "literal":
                return this.generateExampleTypeReferenceLiteral(containerType.literal);
            default:
                assertNever(containerType);
        }
    }

    private generateExampleTypeReferenceList(typeReference: TypeReference): ExampleTypeReference {
        const exampleTypeReference = this.generateExampleTypeReference(typeReference);
        return {
            jsonExample: [exampleTypeReference.jsonExample],
            shape: ExampleTypeReferenceShape.container(ExampleContainer.list([exampleTypeReference]))
        };
    }

    private generateExampleTypeReferenceMap(mapType: MapType): ExampleTypeReference {
        const exampleTypeReferenceKey = this.generateExampleTypeReference(mapType.keyType);
        const exampleTypeReferenceValue = this.generateExampleTypeReference(mapType.valueType);
        const jsonExampleMapKey = this.jsonExampleToMapKey(exampleTypeReferenceKey.jsonExample);
        return {
            jsonExample: {
                [jsonExampleMapKey]: exampleTypeReferenceValue.jsonExample
            },
            shape: ExampleTypeReferenceShape.container(
                ExampleContainer.map([
                    {
                        key: exampleTypeReferenceKey,
                        value: exampleTypeReferenceValue
                    }
                ])
            )
        };
    }

    private jsonExampleToMapKey(jsonExample: unknown): string | number {
        if (typeof jsonExample === "number") {
            return faker.number.int();
        }
        return faker.word.sample();
    }

    private generateExampleTypeReferenceSet(typeReference: TypeReference): ExampleTypeReference {
        const exampleTypeReference = this.generateExampleTypeReference(typeReference);
        return {
            jsonExample: [exampleTypeReference.jsonExample],
            shape: ExampleTypeReferenceShape.container(ExampleContainer.set([exampleTypeReference]))
        };
    }

    private generateExampleTypeReferenceLiteral(literal: Literal): ExampleTypeReference {
        switch (literal.type) {
            case "boolean":
                return {
                    jsonExample: `${literal.boolean}`,
                    shape: ExampleTypeReferenceShape.primitive(ExamplePrimitive.boolean(literal.boolean))
                };
            case "string":
                return {
                    jsonExample: `"${literal.string}"`,
                    shape: ExampleTypeReferenceShape.primitive(ExamplePrimitive.string({ original: literal.string }))
                };
            default:
                assertNever(literal);
        }
    }

    private generateExamplePrimitive(primitiveType: PrimitiveType): ExampleTypeReference {
        switch (primitiveType) {
            case "STRING":
                const word = faker.lorem.words({ min: 2, max: 5 })
                return {
                    jsonExample: word,
                    shape: ExampleTypeReferenceShape.primitive(ExamplePrimitive.string({ original: word }))
                };
            case "INTEGER":
                const int = faker.number.int()
                return {
                    jsonExample: int,
                    shape: ExampleTypeReferenceShape.primitive(ExamplePrimitive.integer(int))
                };
            case "DOUBLE":
                const float = faker.number.float()
                return {
                    jsonExample: float,
                    shape: ExampleTypeReferenceShape.primitive(ExamplePrimitive.double(float))
                };
            case "BOOLEAN":
                const bool = faker.datatype.boolean()
                return {
                    jsonExample: bool,
                    shape: ExampleTypeReferenceShape.primitive(ExamplePrimitive.boolean(bool))
                };
            case "LONG":
                const long = faker.number.bigInt()
                return {
                    jsonExample: long,
                    shape: ExampleTypeReferenceShape.primitive(ExamplePrimitive.long(long))
                };
            case "DATE_TIME":
                const datetime = faker.date.recent()
                return {
                    jsonExample: datetime.toJSON(),
                    shape: ExampleTypeReferenceShape.primitive(
                        ExamplePrimitive.datetime(datetime)
                    )
                };
            case "UUID":
                const uuid = faker.string.uuid()
                return {
                    jsonExample: uuid,
                    shape: ExampleTypeReferenceShape.primitive(
                        ExamplePrimitive.uuid(uuid)
                    )
                };
            case "DATE":
                const date = faker.date.recent().toDateString()
                return {
                    jsonExample: date,
                    shape: ExampleTypeReferenceShape.primitive(ExamplePrimitive.date(date))
                };
            case "BASE_64":
                // TODO(amckinney): Add support for base64 example primitives; use a string for now.
                return {
                    jsonExample: "SGVsbG8gV29ybGQ=",
                    shape: ExampleTypeReferenceShape.primitive(
                        ExamplePrimitive.string({ original: "SGVsbG8gV29ybGQ=" })
                    )
                };
            default:
                assertNever(primitiveType);
        }
    }

    private generateExampleUnknown(): ExampleTypeReference {
        return {
            jsonExample: {},
            shape: ExampleTypeReferenceShape.unknown({})
        };
    }

    private resolveType(name: DeclaredTypeName): TypeDeclaration {
        const typeDeclaration = this.ir.types[name.typeId];
        if (typeDeclaration == null) {
            throw new Error(`internal error: could not resolve type with id: ${name.typeId}`);
        }
        return typeDeclaration;
    }

    private newNamelessExampleType({
        jsonExample,
        shape
    }: {
        jsonExample: unknown;
        shape: ExampleTypeShape;
    }): ExampleType {
        return {
            name: undefined,
            docs: undefined,
            jsonExample,
            shape
        };
    }
}
