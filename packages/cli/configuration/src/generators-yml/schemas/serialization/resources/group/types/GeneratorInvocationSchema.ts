/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index.js";
import * as FernDefinition from "../../../../api/index.js";
import * as core from "../../../../core/index.js";
import { GeneratorOutputSchema } from "./GeneratorOutputSchema.js";
import { GithubConfigurationSchema } from "./GithubConfigurationSchema.js";
import { GeneratorPublishMetadataSchema } from "./GeneratorPublishMetadataSchema.js";
import { GeneratorSnippetsSchema } from "./GeneratorSnippetsSchema.js";
import { GeneratorApiSettingsSchema } from "./GeneratorApiSettingsSchema.js";

export const GeneratorInvocationSchema: core.serialization.ObjectSchema<
    serializers.GeneratorInvocationSchema.Raw,
    FernDefinition.GeneratorInvocationSchema
> = core.serialization.object({
    name: core.serialization.string(),
    version: core.serialization.string(),
    output: GeneratorOutputSchema.optional(),
    github: GithubConfigurationSchema.optional(),
    config: core.serialization.unknown(),
    metadata: GeneratorPublishMetadataSchema.optional(),
    keywords: core.serialization.list(core.serialization.string()).optional(),
    snippets: GeneratorSnippetsSchema.optional(),
    "ir-version": core.serialization.string().optional(),
    "smart-casing": core.serialization.boolean().optional(),
    api: GeneratorApiSettingsSchema.optional(),
    "disable-examples": core.serialization.boolean().optional(),
    "publish-metadata": GeneratorPublishMetadataSchema.optional(),
});

export declare namespace GeneratorInvocationSchema {
    export interface Raw {
        name: string;
        version: string;
        output?: GeneratorOutputSchema.Raw | null;
        github?: GithubConfigurationSchema.Raw | null;
        config?: unknown;
        metadata?: GeneratorPublishMetadataSchema.Raw | null;
        keywords?: string[] | null;
        snippets?: GeneratorSnippetsSchema.Raw | null;
        "ir-version"?: string | null;
        "smart-casing"?: boolean | null;
        api?: GeneratorApiSettingsSchema.Raw | null;
        "disable-examples"?: boolean | null;
        "publish-metadata"?: GeneratorPublishMetadataSchema.Raw | null;
    }
}
