/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index.js";
import * as FernDefinition from "../../../../api/index.js";
import * as core from "../../../../core/index.js";
import { ExampleTypeSchema } from "../../examples/types/ExampleTypeSchema.js";
import { EncodingSchema } from "../../encoding/types/EncodingSchema.js";
import { SourceSchema } from "../../source/types/SourceSchema.js";
import { WithDocsSchema } from "../../commons/types/WithDocsSchema.js";
import { WithAvailability } from "../../commons/types/WithAvailability.js";
import { WithAudiences } from "../../commons/types/WithAudiences.js";

export const BaseTypeDeclarationSchema: core.serialization.ObjectSchema<
    serializers.BaseTypeDeclarationSchema.Raw,
    FernDefinition.BaseTypeDeclarationSchema
> = core.serialization
    .object({
        examples: core.serialization.list(ExampleTypeSchema).optional(),
        encoding: EncodingSchema.optional(),
        source: SourceSchema.optional(),
        inline: core.serialization.boolean().optional(),
    })
    .extend(WithDocsSchema)
    .extend(WithAvailability)
    .extend(WithAudiences);

export declare namespace BaseTypeDeclarationSchema {
    export interface Raw extends WithDocsSchema.Raw, WithAvailability.Raw, WithAudiences.Raw {
        examples?: ExampleTypeSchema.Raw[] | null;
        encoding?: EncodingSchema.Raw | null;
        source?: SourceSchema.Raw | null;
        inline?: boolean | null;
    }
}
