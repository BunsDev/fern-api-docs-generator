/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index.js";
import * as FernDefinition from "../../../../api/index.js";
import * as core from "../../../../core/index.js";
import { HttpMethodSchema } from "./HttpMethodSchema.js";
import { HttpPathParameterSchema } from "./HttpPathParameterSchema.js";
import { HttpRequest } from "./HttpRequest.js";
import { HttpResponseSchema } from "./HttpResponseSchema.js";
import { HttpResponseStreamSchema } from "./HttpResponseStreamSchema.js";
import { ResponseErrorsSchema } from "./ResponseErrorsSchema.js";
import { ExampleEndpointCallSchema } from "../../examples/types/ExampleEndpointCallSchema.js";
import { Pagination } from "./Pagination.js";
import { ServiceTransport } from "./ServiceTransport.js";
import { SourceSchema } from "../../source/types/SourceSchema.js";
import { WithDisplayName } from "../../commons/types/WithDisplayName.js";
import { DeclarationSchema } from "../../commons/types/DeclarationSchema.js";
import { ResponseError } from "./ResponseError.js";

export const HttpEndpointSchema: core.serialization.ObjectSchema<
    serializers.HttpEndpointSchema.Raw,
    FernDefinition.HttpEndpointSchema
> = core.serialization
    .object({
        method: HttpMethodSchema.optional(),
        "base-path": core.serialization.string().optional(),
        path: core.serialization.string(),
        url: core.serialization.string().optional(),
        "path-parameters": core.serialization.record(core.serialization.string(), HttpPathParameterSchema).optional(),
        auth: core.serialization.boolean().optional(),
        idempotent: core.serialization.boolean().optional(),
        "stream-condition": core.serialization.string().optional(),
        request: HttpRequest.optional(),
        response: HttpResponseSchema.optional(),
        "response-stream": HttpResponseStreamSchema.optional(),
        errors: ResponseErrorsSchema.optional(),
        examples: core.serialization.list(ExampleEndpointCallSchema).optional(),
        pagination: Pagination.optional(),
        transport: ServiceTransport.optional(),
        source: SourceSchema.optional(),
    })
    .extend(WithDisplayName)
    .extend(DeclarationSchema);

export declare namespace HttpEndpointSchema {
    export interface Raw extends WithDisplayName.Raw, DeclarationSchema.Raw {
        method?: HttpMethodSchema.Raw | null;
        "base-path"?: string | null;
        path: string;
        url?: string | null;
        "path-parameters"?: Record<string, HttpPathParameterSchema.Raw> | null;
        auth?: boolean | null;
        idempotent?: boolean | null;
        "stream-condition"?: string | null;
        request?: HttpRequest.Raw | null;
        response?: HttpResponseSchema.Raw | null;
        "response-stream"?: HttpResponseStreamSchema.Raw | null;
        errors?: ResponseErrorsSchema.Raw | null;
        examples?: ExampleEndpointCallSchema.Raw[] | null;
        pagination?: Pagination.Raw | null;
        transport?: ServiceTransport.Raw | null;
        source?: SourceSchema.Raw | null;
    }
}
